{"version":3,"file":"AnyTouch.common.js","sources":["../node_modules/any-event/src/main.ts","../src/const.ts","../src/vector.ts","../src/input/adapters/Abstract.ts","../src/input/adapters/Touch.ts","../src/input/adapters/Mouse.ts","../src/input/index.ts","../src/compute/intervalCompute.ts","../src/compute/computeDistance.ts","../src/compute/computeDeltaXY.ts","../src/compute/computeMaxLength.ts","../src/compute/computeVector.ts","../src/compute/computeScale.ts","../src/compute/computeAngle.ts","../src/compute/computeMulti.ts","../src/compute/index.ts","../src/InputManage.ts","../src/utils/computeTouchAction.ts","../src/Store.ts","../src/const/recognizerStatus.ts","../src/recognitions/Base.ts","../src/recognitions/Tap.ts","../src/recognitions/Press.ts","../src/utils/getHV.ts","../src/recognitions/Pan.ts","../src/recognitions/Swipe.ts","../src/recognitions/Pinch.ts","../src/recognitions/Rotate.ts","../src/AnyTouch.ts","../src/vueDirective/InstanceManage.ts","../src/vueDirective/index.ts","../src/main.ts"],"sourcesContent":["type Listener = ((...payload: any) => void) & { isOnce?: boolean }\n\ninterface ListenersMap {\n    [propName: string]: Listener[];\n}\nexport default class AnyEvent {\n    private _listenersMap: ListenersMap;\n\n    constructor() {\n        this._listenersMap = {};\n    };\n\n    /**\n     * 绑定事件\n     * @param {String|Symbol} 事件名\n     * @param {Function} 回调函数\n     */\n    on(eventName: string, listener: Listener): AnyEvent {\n        if (undefined === this._listenersMap[eventName]) {\n            this._listenersMap[eventName] = [];\n        }\n        this._listenersMap[eventName].push(listener);\n        return this;\n    };\n\n    /**\n     * 添加单次监听器 listener 到名为 eventName 的事件。 \n     * 当 eventName 事件下次触发时，监听器会先被移除，然后再调用。\n     * @param {String|Symbol} 事件名\n     * @param {Function} 回调函数\n     */\n    once(eventName: string, listener: Listener): AnyEvent {\n        listener.isOnce = true;\n        this.on(eventName, listener);\n        return this;\n    };\n\n    /**\n     * 解除绑定 \n     * 如果不指定listener, 那么解除所有eventName对应回调\n     * @param {String|Symbol} 事件名\n     * @param {Function} 回调函数\n     */\n    off(eventName: string, listener?: Listener): AnyEvent {\n        const listeners = this._listenersMap[eventName];\n        // 事件存在\n        if (undefined !== listeners) {\n            // 清空事件名对应的所有回调\n            if (undefined === listener) {\n                delete this._listenersMap[eventName];\n            }\n            // 清空指定回调\n            else {\n                const index = listeners.findIndex((fn: Listener) => fn === listener);\n                listeners.splice(index, 1);\n            }\n        }\n        return this;\n    };\n\n\n\n    /**\n     * 按照监听器注册的顺序，同步地调用每个注册到名为 eventName 的事件的监听器，并传入提供的参数。\n     * @param {String|Symbol} 事件名 \n     * @param {Any} 载荷数据 \n     * @returns {Boolean} 如果事件有监听器，则返回 true，否则返回 false。\n     */\n    emit(eventName: string, ...payload: any): boolean {\n        const listeners = this._listenersMap[eventName];\n        if (undefined !== listeners && 0 < listeners.length) {\n            for (let [index, listener] of listeners.entries()) {\n                if (listener.isOnce) {\n                    let listenerClone = listener;\n                    listeners.splice(index, 1);\n                    listenerClone(...payload);\n                } else {\n                    listener(...payload);\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * 检查是否已绑定事件\n     * @param {String|Symbol} 事件名\n     * @returns {Boolean} 是否已绑定\n     */\n    has(eventName: string): boolean {\n        return undefined !== this._listenersMap[eventName] && 0 < this._listenersMap[eventName].length;\n    };\n\n    /**\n     * 返回所有事件名称\n     */\n    getEventNames() {\n        const eventNames: string[] = [];\n        for (let eventName in this._listenersMap) {\n            eventNames.push(eventName);\n        }\n        return eventNames;\n    };\n\n    /**\n     * getEventNames别名, 为了和node的api一致\n     */\n    eventNames() {\n        return this.getEventNames();\n    }\n\n    /**\n     * 销毁实例\n     */\n    destroy() {\n        this._listenersMap = {};\n    };\n};","// 简单判断是否手机设备\n// export const MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n// 是否手机设备\n// export const IS_MOBILE = navigator.userAgent ? MOBILE_REGEX.test(navigator.userAgent) : true;\n\n// 是否支持touch事件\n\nexport const IS_WX = undefined === (<any>window);\nexport const SUPPORT_TOUCH = IS_WX || ('ontouchstart' in window);\n\n// 是否是移动设备\n// export const SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && IS_MOBILE;\n\n// 方向\nexport const DIRECTION_NONE = 1; // 0000 0001\nexport const DIRECTION_LEFT = 2; //  0000 0010\nexport const DIRECTION_RIGHT = 4; // 0000 0100 \nexport const DIRECTION_UP = 8; // 0000 1000\nexport const DIRECTION_DOWN = 16; // 0001 0000\n\n// 位运算 求值 对上上面的4个方向可以简单理解为\"+\"\nexport const DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT; // 6\nexport const DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN; // 24\nexport const DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL; // 30\n\n// 计算触发时间间隔, 防止事件触发就一直计算\nexport const COMPUTE_INTERVAL = 16;\n\n\n// 计算时候取touchs.clientX | clientY\nexport const CLIENT_X = 'clientX';\nexport const CLIENT_Y = 'clientY';\n\n\n// 识别器状态码\nexport const RECOGNIZER_STATUS_POSSIBLE = 1;\nexport const RECOGNIZER_STATUS_BEGAN = 2;\nexport const RECOGNIZER_STATUS_CHANGED = 4;\nexport const RECOGNIZER_STATUS_ENDED = 8;\nexport const RECOGNIZER_STATUS_RECOGNIZED = RECOGNIZER_STATUS_ENDED;\nexport const RECOGNIZER_STATUS_CANCELLED = 16;\nexport const RECOGNIZER_STATUS_FAILED = 32;\n\n// input的类型\nexport const INPUT_START = 'start';\nexport const INPUT_MOVE = 'move';\nexport const INPUT_CANCEL = 'cancel';\nexport const INPUT_END = 'end';\n\n\nexport const NONE = 'none';","import { CLIENT_X, CLIENT_Y } from './const';\nimport { directionString, Point,Vector } from './interface';\n\n/**\n * 获取向量长度(向量模)\n * @param {Object} 向 量\n */\nexport const getVLength = (v: Vector): number => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * 点积\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getDotProduct = (v1: Vector, v2: Vector) => {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\n/**\n * 向量夹角(弧度)\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getRadian = (v1: Vector, v2: Vector) => {\n    var mr = getVLength(v1) * getVLength(v2);\n    if (mr === 0) return 0;\n    var r = getDotProduct(v1, v2) / mr;\n    if (r > 1) r = 1;\n    return Math.acos(r);\n}\n\n/**\n * 求旋转方向\n * 顺时针/逆时针\n */\nexport const getCross = (v1: Vector, v2: Vector) => {\n    return v1.x * v2.y - v2.x * v1.y;\n}\n\n/**\n * 向量夹角(角度)\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getAngle = (v1: Vector, v2: Vector) => {\n    var angle = getRadian(v1, v2);\n    if (getCross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return radianToAngle(angle);\n};\n\n/**\n * 弧度转角度\n * @param {Number} 弧度 \n */\nexport const radianToAngle = (radian: number): number => radian / Math.PI * 180;\n\n/**\n * 角度转弧度\n * @param {Number} 角度 \n */\nexport const angleToRadian = (angle: number): number => angle / 180 * Math.PI;\n\n/**\n * 获取多点之间的中心坐标\n * @param {Array} 触碰点 s\n */\nexport const getCenter = (points: { clientX: number, clientY: number }[]): Point => {\n    const { length } = points;\n    // 由于是触碰后才运行getCenter, 所以一定至少有一个点(end阶段也有clientX/Y)\n    // 所以不做 0 < length 的判断了\n    const countPoint = points.reduce((countPoint: Point, point: any) => {\n        countPoint.x += point[CLIENT_X];\n        countPoint.y += point[CLIENT_Y];\n        return countPoint;\n    }, { x: 0, y: 0 });\n    return { x: Math.round(countPoint.x / length), y: Math.round(countPoint.y / length) }\n};\n\n/**\n * \n * @param {Number} 事件开始到结束的X位移 \n* @param {Number} 事件开始到结束的Y位移 \n */\nexport const getDirection = (x: number, y: number): directionString => {\n    if (x === y) {\n        return 'none';\n    } else if (Math.abs(x) > Math.abs(y)) {\n        return 0 < x ? 'right' : 'left';\n    } else {\n        return 0 < y ? 'down' : 'up';\n    }\n};\n","import { BaseInput, SupportEvent } from '../../interface';\n// 适配器的抽象类\nexport default abstract class {\n    abstract load(event: SupportEvent): BaseInput|void\n}; ","import { BaseInput, eventType } from '../../interface';\nimport Adapter from './Abstract';\nexport default class extends Adapter {\n    load(event: TouchEvent):BaseInput {\n        const points = Array.from(event.touches).map(({ clientX, clientY }) => ({ clientX, clientY }));\n        const changedPoints = Array.from(event.changedTouches).map(({ clientX, clientY }) => ({ clientX, clientY }));\n        return {\n            eventType: <eventType>event.type.replace('touch', ''),\n            changedPoints,\n            points,\n            nativeEvent: event\n        };\n    }\n}; ","import { BaseInput, eventType } from '../../interface';\n// 默认MouseEvent中对type声明仅为string\nimport Adapter from './Abstract';\nexport default class extends Adapter {\n    prevPoints?: { clientX: number, clientY: number }[];\n    isPressed: boolean;\n    constructor() {\n        super();\n        this.isPressed = false;\n    };\n\n    load(event: MouseEvent): BaseInput | void {\n        let { clientX, clientY, type, button } = event;\n\n        // changedPoints = prevPoints其实并不能完全等于touch下的changedPoints\n        // 但是由于鼠标没有多点输入的需求, \n        // 所以暂时如此实现\n        const changedPoints = this.prevPoints || [{ clientX, clientY }];\n\n        let points = [{ clientX, clientY }];\n        this.prevPoints = [{ clientX, clientY }];\n\n        // 必须左键\n        if ('mousedown' === type) {\n            if (0 === button) {\n                this.isPressed = true;\n            } else {\n                return;\n            }\n        }\n\n        if ('mousemove' === type) {\n            if (!this.isPressed) return;\n            // 确保移动过程中, 一直按住的都是左键,\n            // if(1 !== event.which) {\n            //     type = 'mouseup'\n            // }\n        } else if ('mouseup' === type) {\n            if (this.isPressed) {\n                points = [];\n            } else {\n                return;\n            };\n            this.isPressed = false;\n        }\n\n        const MAP = {\n            mousedown: 'start',\n            mousemove: 'move',\n            mouseup: 'end'\n        };\n\n        return {\n            eventType: <eventType>MAP[<'mousedown' | 'mousemove' | 'mouseup'>type],\n            changedPoints,\n            points,\n            nativeEvent: event\n        };\n    }\n}; ","/**\n * 构造统一的Input格式\n */\nimport { Input, Point, SupportEvent } from '../interface';\nimport { SUPPORT_TOUCH, INPUT_END, INPUT_START, INPUT_CANCEL } from '../const';\nimport { getCenter } from '../vector';\nimport Touch from './adapters/Touch';\nimport Mouse from './adapters/Mouse';\nimport Adapter from './adapters/Abstract';\n\nexport default class {\n    // 缓存触点中心\n    private _center?: Point;\n    public adapter: Adapter;\n    constructor() {\n        this.adapter = SUPPORT_TOUCH ? new Touch() : new Mouse();\n    };\n\n    public load(event: SupportEvent): Input | void {\n        // 从event中采集的数据\n        const BASE_INPUT = this.adapter.load(event);\n        \n        if (undefined === BASE_INPUT) {\n            return;\n        }\n        const { eventType, points, changedPoints } = BASE_INPUT;\n        // 当前触点数\n        const pointLength = points.length;\n\n        // 变化前触点数\n        const changedPointLength = changedPoints.length;\n        \n        // 识别流程的开始和结束标记\n        const isStart = (INPUT_START === eventType) && (0 === changedPointLength - pointLength);\n        // 所有触点都离开算作\"final\", 这和hammer.js不一样\n        const isEnd = (INPUT_END === eventType || INPUT_CANCEL === eventType) && (0 === pointLength);\n\n        // 中心坐标\n        if (0 < pointLength) {\n            this._center = getCenter(BASE_INPUT.points);\n        }\n\n        // 当前时间\n        const timestamp = Date.now();\n\n        // 原生属性/方法\n        const { target, currentTarget } = event;\n        const { x, y } = <Point>(this._center || {});\n        return {\n            ...BASE_INPUT,\n            preventDefault: () => {\n                event.preventDefault();\n            },\n            isStart,\n            isEnd,\n            pointLength,\n            changedPointLength,\n            center: this._center,\n            x, y,\n            timestamp,\n            target,\n            currentTarget,\n            nativeEvent: event\n        };\n    };\n}","// 返回最近一个时间段的计算结果\n// 默认间隔25ms做一次计算, 让数据更新,\n// 让end阶段读取上一步的计算数据, 比如方向, 速率等...\n// 防止快速滑动到慢速滑动的手势识别成swipe\nimport { Input,directionString } from '../interface';\nimport { COMPUTE_INTERVAL, INPUT_CANCEL, INPUT_END } from '../const';\nimport { getDirection } from '../vector';\nimport Store from '../Store';\n\nexport default ({ prevInput, input }: { prevInput?: Input, input?: Input },$store:Store): { speedX: number, speedY: number, velocityX: number, velocityY: number, direction?: directionString } => {\n\n    // 速率\n    let velocityX = 0;\n    let velocityY = 0;\n\n    // 速度\n    let speedX = 0;\n    let speedY = 0;\n\n    // 方向\n    let direction: directionString = 'none';\n\n    // 点击鼠标左键, 会出现undefined\n    if (undefined !== input) {\n        // _prevInput || input用来保证deltaX等不会有undefined参与计算\n        const _prevInput = prevInput || input;\n        const deltaTime = input.timestamp - _prevInput.timestamp;\n        // 每16ms刷新速度数据\n        if (-1 === [INPUT_CANCEL, INPUT_END].indexOf(input.eventType) && (COMPUTE_INTERVAL < deltaTime || undefined === $store.get('direction'))) {\n            const deltaX = input.x - _prevInput.x;\n            const deltaY = input.y - _prevInput.y;\n            speedX = Math.round(deltaX / deltaTime * 100) / 100;\n            speedY = Math.round(deltaY / deltaTime * 100) / 100;\n            velocityX = Math.abs(speedX);\n            velocityY = Math.abs(speedY);\n            direction = getDirection(deltaX, deltaY) || <directionString>($store.get('direction'));\n            // 存储状态\n            $store.set({ speedX });\n            $store.set({ speedY });\n            $store.set({ velocityX });\n            $store.set({ velocityY });\n            $store.set({ direction });\n        } else {\n            speedX = $store.get('speedX', 0);\n            speedY = $store.get('speedY', 0);\n            velocityX = $store.get('velocityX', 0);\n            velocityY = $store.get('velocityY', 0);\n            direction = $store.get('direction');\n        }\n    }\n\n    return { velocityX, velocityY, speedX, speedY, direction };\n};","\nimport { Input,directionString } from '../interface';\nimport { CLIENT_X, CLIENT_Y } from '../const';\nimport { getVLength, getDirection } from '../vector';\nimport Store from '../Store';\nexport default function ({\n    startInput,\n    input\n}: {\n    startInput: Input,\n    input: Input\n},$store:Store): { displacementX: number, displacementY: number, distanceX: number, distanceY: number, distance: number, overallDirection: directionString } {\n    const { eventType } = input;\n    let displacementX = 0;\n    let displacementY = 0;\n    if ('start' === eventType) {\n        $store.set({ displacementX });\n        $store.set({ displacementY });\n    } else if ('move' === eventType) {\n        displacementX = Math.round(input!.points[0][CLIENT_X] - startInput!.points[0][CLIENT_X]);\n        displacementY = Math.round(input!.points[0][CLIENT_Y] - startInput!.points[0][CLIENT_Y]);\n        // 记录本次位移\n        $store.set({ displacementX });\n        $store.set({ displacementY });\n    } else if ('end' === eventType) {\n        displacementX = $store.get('displacementX', 0);\n        displacementY = $store.get('displacementY', 0);\n    }\n\n    const distanceX = Math.abs(displacementX);\n    const distanceY = Math.abs(displacementY);\n    const distance = Math.round(getVLength({ x: distanceX, y: distanceY }));\n    const overallDirection = getDirection(displacementX, displacementY);\n    return {\n        displacementX, displacementY, distanceX, distanceY, distance, overallDirection\n    };\n};","import { radianToAngle } from '../vector';\nimport { Store, InputRecord } from '../interface';\nexport default function ({\n    prevInput,\n    input\n}: InputRecord, $store: Store): { deltaX: number, deltaY: number, deltaXYAngle: number } {\n    // 每次事件触发时位移的变化\n    let deltaX: number;\n    let deltaY: number;\n    // deltaX/Y与2者合位移的角度\n    let deltaXYAngle: number = 0;\n\n    // 计算deltaX/Y\n    // if ('end' === input.eventType || 'start' === input.eventType) {\n    if (undefined === prevInput) {\n        deltaX = 0;\n        deltaY = 0;\n    } else {\n        deltaX = input.x - prevInput.x;\n        deltaY = input.y - prevInput.y;\n    }\n\n    // 计算deltaXAngle / deltaYAngle\n    if (0 !== deltaX || 0 !== deltaY) {\n        const deltaXY = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n        deltaXYAngle = Math.round(radianToAngle(Math.acos(Math.abs(deltaX) / deltaXY)));\n        $store.set({ deltaXYAngle });\n    } else {\n        deltaXYAngle = $store.get('deltaXYAngle', 0);\n    }\n\n    return { deltaX, deltaY, deltaXYAngle };\n};","import Store from '../Store';\n\nexport default ({ pointLength, isStart }: { pointLength:number, isStart:boolean}, $store:Store): number => {\n    if (isStart) {\n        $store.set({maxPointLength:pointLength});\n        return pointLength;\n    } else {\n        const maxLength = $store.get('maxPointLength', 0);\n        if (pointLength > maxLength) {\n            $store.set({maxPointLength:pointLength});\n        }\n\n        return $store.get('maxPointLength', 0)\n    }\n};","import { Input } from '../interface';\nimport { CLIENT_X, CLIENT_Y } from '../const';\nexport default (input: Input): { x: number, y: number } => ({\n    x: input.points[1][CLIENT_X] - input.points[0][CLIENT_X],\n    y: input.points[1][CLIENT_Y] - input.points[0][CLIENT_Y]\n});","import { Vector } from '../interface';\nimport { getVLength } from '../vector';\nexport default function ({\n    startV, prevV, activeV\n}:  Record<string,Vector>): { scale: number, deltaScale: number } {\n    const deltaScale = getVLength(activeV) / getVLength(prevV);\n    const scale = getVLength(activeV) / getVLength(startV);\n    return { scale, deltaScale };\n};","import { Vector } from '../interface';\nimport { getAngle } from '../vector';\nexport default function ({\n    startV, prevV, activeV\n}: Record<string,Vector>): { angle: number, deltaAngle: number } {\n    const deltaAngle = getAngle(activeV, prevV);\n    const angle = getAngle(activeV, startV);\n    return { angle, deltaAngle };\n};","\nimport { Input } from '../interface';\nimport computeVector from './computeVector';\nimport computeScale from './computeScale';\nimport computeAngle from './computeAngle';\nimport Store from '../Store';\ntype Arg = {\n    startMultiInput?: Input,\n    prevInput?: Input,\n    input: Input\n};\n\ntype Ret = {\n    scale: number;\n    deltaScale: number;\n    angle: number;\n    deltaAngle: number\n}\n\nexport default function ({\n    startMultiInput,\n    prevInput,\n    input\n}: Arg, $store: Store): Ret {\n    // 上一触点数大于1, 当前触点大于1\n    // 连续第二次出现多点, 才能开始计算\n    if (undefined !== prevInput && 1 < prevInput.points.length && 1 < input.points.length) {\n        // 2指形成的向量\n        const startV = computeVector(<Input>startMultiInput);\n        const prevV = computeVector(prevInput);\n        const activeV = computeVector(input);\n        // 计算缩放\n        const { scale, deltaScale } = computeScale({\n            startV, activeV, prevV\n        });\n\n        // ========= 计算旋转角度 =========\n        const { deltaAngle, angle } = computeAngle({ startV, prevV, activeV });\n        $store.set({ angle });\n        $store.set({ scale });\n        return { scale, deltaScale, deltaAngle, angle };\n    } else {\n        return {\n            scale: $store.get('scale', 1),\n            deltaScale: 1,\n            deltaAngle: 0,\n            angle: $store.get('angle', 0)\n        };\n    }\n};","\nimport { AnyTouchEvent, InputRecord,Store } from '../interface';\nimport intervalCompute from './intervalCompute';\nimport computeDistance from './computeDistance';\nimport computeDeltaXY from './computeDeltaXY';\nimport computeMaxLength from './computeMaxLength';\nimport computMulti from './computeMulti';\n\nexport default function (inputs: InputRecord, $store: Store): AnyTouchEvent {\n    const { input } = inputs;\n    // ========= 整体距离/位移=========\n    const { displacementX, displacementY, distanceX, distanceY, distance, overallDirection } = computeDistance(inputs, $store);\n\n    // ========= 已消耗时间 =========\n    const deltaTime = inputs.input.timestamp - inputs.startInput.timestamp;\n\n    // ========= 最近25ms内计算数据, 瞬时数据 =========\n    const { velocityX, velocityY, speedX, speedY, direction } = intervalCompute(inputs, $store);\n\n    // ========= 中心点位移增量 =========\n    const { deltaX, deltaY, deltaXYAngle } = computeDeltaXY(inputs, $store);\n\n\n    // ========= 多点计算 =========\n    // 上一触点数大于1, 当前触点大于1\n    // 连续第二次出现多点, 才能开始计算\n    const { scale,\n        deltaScale,\n        angle,\n        deltaAngle } = computMulti(inputs, $store);\n\n    const maxPointLength = computeMaxLength(input, $store);\n    return {\n        type: '',\n        ...input,\n        velocityX,\n        velocityY,\n        speedX,\n        speedY,\n        deltaTime,\n        overallDirection,\n        direction,\n        deltaX, deltaY, deltaXYAngle,\n        displacementX,\n        displacementY,\n        distanceX,\n        distanceY,\n        distance,\n        scale,\n        deltaScale,\n        angle,\n        deltaAngle,\n        maxPointLength\n    };\n};","import { Input, SupportEvent, InputRecord, AnyTouchEvent,Store } from './interface';\nimport InputFactory from './input';\nimport compute from './compute/index';\nexport default class {\n    // 起点(单点|多点)\n    startInput?: Input;\n    // 前一次的触电\n    prevInput?: Input;\n    // 当前触点\n    activeInput?: Input;\n    // 多点触碰的起点\n    startMultiInput?: Input;\n\n    inputFactory: InputFactory;\n\n    $store: Store;\n\n    constructor({ $store }: { $store: Store }) {\n        this.inputFactory = new InputFactory();\n        this.$store = $store;\n    };\n\n    /**\n     * 读取事件对象\n     * @param {SupportEvent} 支持传入的事件对象 \n     * @returns {AnyTouchEvent} AnyTouchEvent\n     */\n    load(event: SupportEvent): AnyTouchEvent | void {\n        // 格式化不同设备输入数据\n        const input = this.inputFactory.load(event);\n        // 过滤无效的输入    \n        if (undefined === input) return;\n        const record = this._record(input);\n        return compute(record, this.$store);\n    };\n\n    /**\n     * 记录计算所需的几个输入\n     * @param {Input} 输入\n     * @return {InputRecord} 输入记录\n     */\n    private _record(input: Input): InputRecord {\n        // 当前输入状态\n        const { eventType } = input;\n        // 获取上一点\n        this.prevInput = this.activeInput;\n\n        if ('start' === eventType) {\n            // 起点(单点|多点)\n            if (input.isStart) {\n                this.startInput = input;\n            }\n\n            // 起点(多点)\n            if (1 < input.pointLength) {\n                this.startMultiInput = input;\n            } else {\n                // 如果出现了单点, 那么之前的多点起点记录失效\n                this.startMultiInput = undefined;\n            }\n        }\n        // 当前点\n        this.activeInput = input;\n\n        return {\n            startMultiInput: this.startMultiInput,\n            startInput: <Input>this.startInput,\n            prevInput: this.prevInput,\n            input\n        };\n    };\n}; ","export default (touchActions: string[]): string => {\n    // 表示优先级\n    const TOUCH_ACTION_PRIORITY: { [propName: string]: number } = {\n        auto: 0,\n        manipulation: 1,\n        'pan-x': 2,\n        'pan-y': 2,\n        none: 3\n    };\n\n    // 最大优先级\n    const MAX_PRIORITY = TOUCH_ACTION_PRIORITY['none'];\n\n    // 最终的有效的touch-action会放在数组中\n    let touchActionCSSArray: string[] = ['auto'];\n    // 上一步计算的touch-action的优先级\n    let prevPriority = 0;\n    for (let touchAction of touchActions) {\n\n        // 当前优先级\n        let activePriority = TOUCH_ACTION_PRIORITY[touchAction];\n\n        // 如果是最大优先级, 那么后面就不用计算了\n        if (MAX_PRIORITY === activePriority) {\n            touchActionCSSArray = [touchAction];\n            break;\n        }\n        // 当前优先级大, 那么覆盖touch-action\n        else if (prevPriority < activePriority) {\n            touchActionCSSArray = [touchAction];\n            prevPriority = activePriority;\n        }\n        // 如果相等那么加入当前touch-action, 例如pan-x/pan-y可以并存\n        else if (prevPriority === activePriority && 0 < activePriority) {\n            touchActionCSSArray.push(touchAction);\n            prevPriority = activePriority;\n        }\n        \n    }\n    return touchActionCSSArray.join(' ');\n};","export default class{\n    store: Record<string, any>;\n\n    constructor() {\n        this.store = {};\n    }\n\n    set(object: object) {\n        this.store = { ...this.store, ...object };\n    };\n\n    get<T>(key: string, defaultValue?: T): T {\n        return this.store[key] || defaultValue;\n    };\n\n    reset() {\n        this.store = {};\n    }\n\n    destroy() {\n        this.reset()\n    }\n}\n","// 识别器状态码\n// 注意: 此处的值会直接被事件名所用, 如panstart/panmove等等\nexport const STATUS_POSSIBLE = 'possible';\nexport const STATUS_START = 'start';\nexport const STATUS_MOVE = 'move';\nexport const STATUS_END = 'end';\nexport const STATUS_CANCELLED = 'cancel';\nexport const STATUS_FAILED = 'failed';\nexport const STATUS_RECOGNIZED = 'recognized';","import { AnyTouchEvent, directionString } from '../interface';\nimport { INPUT_CANCEL, INPUT_END, INPUT_MOVE } from '../const';\nimport {\n    STATUS_POSSIBLE,\n    STATUS_START,\n    STATUS_MOVE,\n    STATUS_END,\n    STATUS_CANCELLED,\n    STATUS_FAILED, STATUS_RECOGNIZED\n} from '../const/recognizerStatus';\n\nexport default abstract class Recognizer {\n    // 手势名\n    public name: string;\n    // 是否禁止\n    public disabled: boolean;\n    // 识别状态\n    public status: string;\n    // 是否已识别\n    public isRecognized: boolean;\n    // 选项\n    public options: { [propName: string]: any };\n    // 需要对应手势失败才能识别成功\n    public requireFailureRecognizers: any[];\n    // 存储外部注入方法的容器\n    public $root: any;\n\n    public eventEmitter: any;\n\n    public isWaitingOther: boolean;\n\n    constructor(options: { name?: string, [k: string]: any }) {\n        this.options = { ...(<any>this.constructor).DEFAULT_OPTIONS, disabled: false, ...options };\n        this.name = this.options.name;\n        this.disabled = this.options.disabled;\n        this.status = STATUS_POSSIBLE;\n        this.isRecognized = false;\n        this.requireFailureRecognizers = [];\n        this.isWaitingOther = false;\n        // 这里面不能直接调用$root等, \n        // 因为rollup生成的代码构造函数并不是该constructor\n        // 而是构造函数中又嵌套了一个同名构造函数\n    };\n\n    /**\n     * 设置识别器\n     * @param {Object} 选项 \n     */\n    public set(options = {}) {\n        this.options = { ...this.options, ...options };\n        // 刷新anyTouch\n        this.$root.update();\n        return this;\n    };\n\n    public $injectRoot($root: any) {\n        this.$root = $root;\n        return this;\n    }\n\n    /**\n     * 对eventEmitter进行封装\n     * @param type \n     * @param payload \n     */\n    public emit(type: string, payload: any) {\n        payload.type = type;\n        this.$root.eventEmitter.emit(type, payload);\n        if (undefined !== this.$root.el && this.$root.options.hasDomEvents) {\n            // 过滤掉几个Event上保留的字段\n            let { target, currentTarget, type, ...data } = payload;\n            let event = new Event(type, payload);\n            Object.assign(event, data);\n            this.$root.el.dispatchEvent(event);\n        }\n    };\n\n    /**\n     * 前者需要后者识别失败才能触发\n     * @param {Recognizer} 识别器实例 \n     */\n    public requireFailure(recognizer: this) {\n        if (!this.requireFailureRecognizers.includes(recognizer)) {\n            this.requireFailureRecognizers.push(recognizer);\n        }\n    };\n\n    /**\n     * 移除识别器之间的\"需要失败\"关系\n     *  @param {Recognizer} 识别器实例 \n     */\n    public removeRequireFailure(recognizer: Recognizer) {\n        for (let [index, requireFailureRecognizer] of this.requireFailureRecognizers.entries()) {\n            if (requireFailureRecognizer.name === recognizer.name) {\n                this.requireFailureRecognizers.splice(index, 1);\n                break;\n            }\n        }\n    };\n\n    /**\n     * 是否需要其他手势失败才能触发\n     */\n    public hasRequireFailure() {\n        return 0 < this.requireFailureRecognizers.length;\n    };\n\n    /**\n     * 是否所有\"需要失败\"的手势都是disabled的\n     */\n    public isAllRequireFailureRecognizersDisabled() {\n        return this.requireFailureRecognizers.every((recognizer: any) => recognizer.disabled);\n    };\n\n    /**\n     * 是否要求注册时指定失败的选择器是失败状态\n     */\n    public isAllRequiresFailedOrPossible(): boolean {\n        for (let recognizer of this.requireFailureRecognizers) {\n            // console.log(this.name, this.isWaitingOther)\n            if (recognizer.isWaitingOther) return false;\n            if (STATUS_FAILED !== recognizer.status && STATUS_POSSIBLE !== recognizer.status) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * 验证触点\n     * @param {Number} 触点数\n     */\n    public isValidPointLength(pointLength: number): boolean {\n        return 0 === this.options.pointLength || this.options.pointLength === pointLength;\n    };\n\n    /**\n     * 是否只支持水平方向\n     */\n    public isOnlyHorizontal() {\n        let isOnlyHorizontal = true;\n        for (let direction of this.options.directions) {\n            isOnlyHorizontal = -1 < ['left', 'right'].indexOf(direction);\n            if (!isOnlyHorizontal) {\n                return false;\n            }\n        }\n        return isOnlyHorizontal;\n    };\n\n    /**\n     * 是否只支持垂直方向\n     */\n    public isOnlyVertical() {\n        let isOnlyVertical = true;\n        for (let direction of this.options.directions) {\n            isOnlyVertical = -1 < ['up', 'down'].indexOf(direction);\n            if (!isOnlyVertical) {\n                return false;\n            }\n        }\n        return isOnlyVertical;\n    };\n\n    /**\n     * 是否支持该方向\n     * @param {String} 方向 \n     */\n    public isVaildDirection(direction?: directionString) {\n        return -1 !== this.options.directions.indexOf(direction) || 'none' === direction;\n    };\n\n    public flow(isVaild: boolean, activeStatus: string, touchDevice: string): string {\n        // if(this.name ==='swipe' ) {\n        //     console.log(isVaild, activeStatus, touchDevice);\n        // }\n        const STATE_MAP: { [k: number]: any } = {\n            // isVaild === true,\n            // Number(true) === 1\n            // 这个分支不会出现STATUS_FAILED\n            // STATUS_END在上面的代码中也会被重置为STATUS_POSSIBLE, 从而进行重新识别\n            1: {\n                [STATUS_POSSIBLE]: {\n                    [INPUT_MOVE]: STATUS_START,\n                    [INPUT_END]: STATUS_RECOGNIZED,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_START]: {\n                    [INPUT_MOVE]: STATUS_MOVE,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_MOVE]: {\n                    [INPUT_MOVE]: STATUS_MOVE,\n                    [INPUT_END]: STATUS_END,\n                }\n            },\n            // isVaild === false\n            // 这个分支有STATUS_FAILED\n            0: {\n                [STATUS_START]: {\n                    [INPUT_MOVE]: STATUS_CANCELLED,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_MOVE]: {\n                    [INPUT_MOVE]: STATUS_CANCELLED,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                }\n            }\n        };\n        // console.warn(Number(isVaild),activeStatus, STATE_MAP[Number(isVaild)][activeStatus]);\n        if (undefined !== STATE_MAP[Number(isVaild)][activeStatus]) {\n            return STATE_MAP[Number(isVaild)][activeStatus][touchDevice] || activeStatus;\n        } else {\n            return activeStatus;\n        }\n    };\n\n    /**\n     * 如果识别结束, 那么重置状态\n     */\n    protected _resetStatus() {\n        // if (this.name === 'tap') console.log('@', this.status);\n        //STATUS_RECOGNIZED === STATUS_END\n        if (-1 !== [STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED].indexOf(this.status)) {\n\n            this.status = STATUS_POSSIBLE;\n        };\n    };\n\n    /**\n     * 适用于大部分移动类型的手势, \n     * 如pan/rotate/pinch/swipe\n     * @param {AnyTouchEvent} 计算数据 \n     */\n    recognize(computed: AnyTouchEvent) {\n        // if(this.name === 'pan')    console.log(this.name,this.status);\n        // 是否识别成功\n        let isVaild = this.test(computed);\n\n        // 重置status\n        this._resetStatus();\n\n        // 状态变化流程\n        let { eventType } = computed;\n\n        this.status = this.flow(isVaild, this.status, eventType);\n\n        if (STATUS_CANCELLED === this.status) {\n            this.emit(this.options.name + 'cancel', computed);\n            return;\n        }\n\n        // 是否已识别\n        this.isRecognized = -1 < [STATUS_START, STATUS_MOVE, STATUS_END, STATUS_RECOGNIZED].indexOf(this.status);\n        // 识别后触发的事件\n        if (this.isRecognized) {\n            this.afterRecognized(computed);\n            // computed = this.lockDirection(computed);d\n            this.emit(this.options.name, computed);\n            // console.log(this.options.name, computed);\n            if (-1 < [STATUS_START, STATUS_MOVE, STATUS_END, STATUS_RECOGNIZED].indexOf(this.status)) {\n                // panstart | panmove | panend等\n                this.emit(this.options.name + this.status, computed);\n                this.afterEmit(computed);\n            }\n        }\n    };\n\n    /**\n     * 识别条件, 基于异步\n     * @param {AnyTouchEvent} 计算数据\n     * @param {(isRecognized: boolean) => void}} 接收是否识别状态\n     */\n    abstract test(computed: AnyTouchEvent): boolean;\n\n    /**\n     * 识别成功后执行\n     * 这个阶段可以对computed数据做些处理\n     * 比如pan可以针对不支持的方向吧deltaX/Y调整为0\n     * swipe可以把不支持的方向上的速率调整为0\n     * @param {AnyTouchEvent} 计算数据 \n     */\n    public afterRecognized(computed: AnyTouchEvent): void { };\n\n    /**\n     * 基类的所有emit触发后执行\n     * @param {AnyTouchEvent} computed \n     */\n    public afterEmit(computed: AnyTouchEvent): void { };\n\n    /**\n     * 计算当前手势的touch-action\n     */\n    abstract getTouchAction(): string[];\n};\n\n","import { AnyTouchEvent, Point } from '../interface';\nimport {\n    STATUS_RECOGNIZED, STATUS_POSSIBLE,\n    STATUS_FAILED,\n} from '../const/recognizerStatus';\nimport Recognizer from './Base';\nimport { INPUT_END } from '../const';\nimport { getVLength } from '../vector';\n\nexport default class TapRecognizer extends Recognizer {\n    public tapCount: number;\n\n\n    // 记录每次单击完成时的坐标\n    public prevTapPoint?: Point;\n    public prevTapTime?: number;\n\n    // 多次tap之间的距离是否满足要求\n    public isValidDistanceFromPrevTap?: boolean;\n\n    // timer\n    private _delayFailTimer?: number;\n    private _waitOtherFailedTimer?: number;\n\n    static DEFAULT_OPTIONS = {\n        name: 'tap',\n        pointLength: 1,\n        tapTimes: 1,\n        // 等待下一次tap的时间, \n        // 超过该事件就立即判断当前点击数量\n        waitNextTapTime: 300,\n        disabled: false,\n        // 从接触到离开允许产生的最大距离\n        positionTolerance: 2,\n        // 2次tap之间允许的最大位移\n        tapsPositionTolerance: 9,\n        // 从接触到离开屏幕的最大时间\n        maxPressTime: 250,\n    };\n    constructor(options = {}) {\n        super(options);\n        this.tapCount = 0;\n    };\n\n    public getTouchAction() {\n        // 单击auto, 多击manipulation=pan + pinch-zoom(禁用了默认双击)\n        return (1 < this.options.tapTimes) ? ['manipulation'] : ['auto'];\n    };\n\n    /**\n     * 判断前后2次点击的距离是否超过阈值\n     * @param {Point} 当前触点\n     * @return {Boolean} 前后2次点击的距离是否超过阈值\n     */\n    private _isValidDistanceFromPrevTap(point: Point): boolean {\n        // 判断2次点击的距离\n        if (undefined !== this.prevTapPoint) {\n            const distanceFromPreviousTap = getVLength({ x: point.x - this.prevTapPoint.x, y: point.y - this.prevTapPoint.y });\n            // 缓存当前点, 作为下次点击的上一点\n            this.prevTapPoint = point;\n            return this.options.tapsPositionTolerance >= distanceFromPreviousTap;\n        } else {\n            this.prevTapPoint = point;\n            return true;\n        }\n    };\n\n    /**\n     * 校验2次tap的时间间隔是否满足\n     * @return {Boolean} 是否满足\n     */\n    private _isValidInterval(): boolean {\n        const now = Date.now();\n        if (undefined === this.prevTapTime) {\n            this.prevTapTime = now;\n            return true;\n        } else {\n            const interval = now - this.prevTapTime;\n            this.prevTapTime = now;\n            return interval < this.options.waitNextTapTime;\n        }\n    };\n\n    /**\n     * 识别后执行, 流程如下:  \n     *             开始   \n     *              |\n     *         <是否end阶段> - 否 - 结束\n     *              |\n     *          关闭定时器c1和c2\n     *              |\n     *          清除等待状态\n     *              |\n     *              是\n     *              |\n     *        重置状态为\"可能是\"\n     *              |\n     *        <是否满足单击条件> - 否 - 结束\n     *              |\n     *              是\n     *              |\n     *       <是否正确连击：是否上次点击信息为空 或 与上次点击的位移/时间是否满足约束> - 否 - 点击次数=1 - 继续(<是否到达点击数要求>)\n     *              |\n     *              是\n     *              |\n     *           点击次数+1\n     *              |\n     *       <是否到达点击数要求> - 否 - 设置定时器c1(t1毫秒后状态设置为\"失败\") - 结束\n     *              |\n     *              是\n     *              |\n     *      <是否需要其他手势失败> - 否 - 触发事件, 状态设置为\"已识别\",重置(点击次数,位置) - 结束\n     *              |\n     *              是\n     *              |\n     *           进入等待状态\n     *              |\n     *  <设置定时器c2(t1毫秒后检查\"需要失败\"的手势是否是\"失败\"状态, 重置(点击次数,位置, 等待状态)> - 否 - 设置状态为\"失败\" - 结束\n     *              |\n     *              是\n     *              |\n     *       触发, 状态设置为\"已识别\", 重置(点击次数,位置)\n     *              |\n     *             结束\n     * \n     * @param {AnyTouchEvent} 计算数据 \n     */\n    public recognize(computed: AnyTouchEvent): void {\n        // 只在end阶段去识别\n        if (INPUT_END !== computed.eventType) return;\n\n        this.status = STATUS_POSSIBLE;\n\n        // 每一次点击是否符合要求\n        if (this.test(computed)) {\n            clearTimeout(this._delayFailTimer);\n            clearTimeout(this._waitOtherFailedTimer);\n            this.isWaitingOther = false;\n            // 判断2次点击之间的距离是否过大\n            // 对符合要求的点击进行累加\n            if (this._isValidDistanceFromPrevTap(computed) && this._isValidInterval()) {\n                this.tapCount++;\n            } else {\n                this.tapCount = 1;\n            }\n            // 是否满足点击次数要求\n            // 之所以用%, 是因为如果连续点击3次, 单击的tapCount会为3, 但是其实tap也应该触发\n            if (0 === this.tapCount % this.options.tapTimes) {\n                if (this.hasRequireFailure() && !this.isAllRequireFailureRecognizersDisabled()) {\n                    this.isWaitingOther = true;\n                    this._waitOtherFailedTimer = (setTimeout as Window['setTimeout'])(() => {\n                        // 检查指定手势是否识别为Failed\n                        if (this.isAllRequiresFailedOrPossible()) {\n                            this.status = STATUS_RECOGNIZED;\n                            this.emit(this.options.name, { ...computed, tapCount: this.tapCount });\n                        } else {\n                            this.status = STATUS_FAILED;\n                        };\n                        this.isWaitingOther = false;\n                        // 不论成功失败都要重置tap计数\n                    }, this.options.waitNextTapTime);\n                }\n                // 如果不需要等待其他手势失败\n                // 那么立即执行\n                else {\n                    this.status = STATUS_RECOGNIZED;\n                    this.emit(this.options.name, { ...computed, tapCount: this.tapCount });\n                    this.reset();\n                }\n            } else {\n                this._delayFailTimer = (setTimeout as Window['setTimeout'])(() => {\n                    this.status = STATUS_FAILED;\n                    this.reset();\n                }, this.options.waitNextTapTime);\n            }\n        } else {\n            this.reset();\n            this.status = STATUS_FAILED;\n        }\n    };\n\n    public reset() {\n        this.tapCount = 0;\n        this.prevTapPoint = undefined;\n        this.prevTapTime = undefined;\n    };\n\n    /**\n      * 识别条件\n      * @param {AnyTouchEvent} 计算数据\n      * @return {Boolean} 是否验证成功\n      */\n    public test(computed: AnyTouchEvent): boolean {\n        // 判断是否发生大的位置变化\n        const { distance, deltaTime, maxPointLength } = computed;\n        // 检查\n        // 1. 触点数\n        // 2. 移动距离\n        // 3. start至end的事件, 区分tap和press\n        return maxPointLength === this.options.pointLength &&\n            this.options.positionTolerance >= distance &&\n            this.options.maxPressTime > deltaTime;\n    };\n\n    public afterEmit(computed: AnyTouchEvent): void { }\n};","import { AnyTouchEvent } from '../interface';\nimport {\n    STATUS_FAILED, STATUS_RECOGNIZED\n} from '../const/recognizerStatus';\nimport { INPUT_CANCEL, INPUT_END, INPUT_START } from '../const';\nimport Recognizer from './Base';\n\nexport default class PressRecognizer extends Recognizer {\n    private _timeoutId?: any;\n    static DEFAULT_OPTIONS = {\n        name: 'press',\n        pointLength: 1,\n        positionTolerance: 9,\n        minPressTime: 251,\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction(): string[] {\n        return ['auto'];\n    };\n\n    recognize(computed: AnyTouchEvent): void {\n        const { eventType, pointLength, distance, deltaTime } = computed;\n\n        // 1. start阶段\n        // 2. 触点数符合\n        // 那么等待minPressTime时间后触发press\n        if (INPUT_START === eventType && this.isValidPointLength(pointLength)) {\n            // 重置状态\n            this._resetStatus();\n            // 延迟触发\n            this.cancel();\n            this._timeoutId = (setTimeout as Window['setTimeout'])(() => {\n                this.status = STATUS_RECOGNIZED;\n                this.emit(this.options.name, computed);\n            }, this.options.minPressTime);\n        }\n\n        // 触发pressup条件:\n        // 1. end阶段\n        // 2. 已识别\n        else if (INPUT_END === eventType && STATUS_RECOGNIZED === this.status) {\n            this.emit(`${this.options.name}up`, computed);\n        }\n\n        // 一旦不满足必要条件, 触发失败\n        // 对应cancel和end阶段\n        else if (!this.test(computed) || (this.options.minPressTime > deltaTime && -1 !== [INPUT_END, INPUT_CANCEL].indexOf(eventType) )) {\n            this.cancel();\n            this.status = STATUS_FAILED;\n        }\n\n    };\n\n    /**\n     * 是否满足:\n     * 移动距离不大\n     */\n    test({ distance}: AnyTouchEvent): boolean {\n        return this.options.positionTolerance > distance;\n    };\n\n    cancel(): void {\n        clearTimeout(this._timeoutId);\n    }\n\n    afterEmit() { }\n};","/**\n * 获取数组中方向是否水平/垂直\n * @param {directionString[]} 方向数组, ['left', 'right','up', 'down']\n * \n */\nimport {directionString} from '../interface';\nexport default (directions: [directionString?, directionString?, directionString?, directionString?]): { hasHorizontal: boolean, hasVertical: boolean } => {\n    let hasHorizontal = false;\n    let hasVertical = false;\n    for (let direction of directions) {\n        if (-1 < ['left', 'right'].indexOf(<string>direction)) {\n            hasHorizontal = true;\n            if (hasVertical) break;\n        } else if (-1 < ['up', 'down'].indexOf(<string>direction)) {\n            hasVertical = true;\n            if (hasHorizontal) break;\n        } else {\n            throw new Error('wrong direction!');\n        }\n    };\n    return { hasHorizontal, hasVertical };\n};","import { AnyTouchEvent, Computed } from '../interface';\nimport { INPUT_MOVE } from '../const';\nimport Recognizer from './Base';\nimport getHV from '../utils/getHV';\n\nexport default class PanRecognizer extends Recognizer {\n    static DEFAULT_OPTIONS = {\n        name: 'pan',\n        threshold: 10,\n        pointLength: 1,\n        directions: ['up', 'right', 'down', 'left']\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        let touchActions = ['auto'];\n        let { hasHorizontal, hasVertical } = getHV(this.options.directions);\n        if (hasHorizontal && hasVertical) {\n            touchActions = ['none'];\n        } else if (!hasHorizontal && hasVertical) {\n            // 没有水平移动\n            touchActions = ['pan-x'];\n        } else if (!hasVertical && hasHorizontal) {\n            // 没有垂直移动\n            touchActions = ['pan-y'];\n        }\n        return touchActions;\n    };\n\n    /**\n     * @param {AnyTouchEvent} 计算数据\n     * @return {Boolean}} .是否是当前手势 \n     */\n    test({ distance, direction, eventType, pointLength }: AnyTouchEvent): boolean {\n        return INPUT_MOVE === eventType &&\n            (this.isRecognized || this.options.threshold < distance) &&\n            this.isValidPointLength(pointLength) &&\n            this.isVaildDirection(direction);\n    };\n\n    /**\n     * 识别后发布panleft等事件\n     * @param {AnyTouchEvent} 计算数据\n     */\n    afterEmit(computed: AnyTouchEvent) {\n        if ('none' !== computed.direction) {\n            this.emit(this.options.name + computed.direction, computed);\n        }\n    };\n\n    afterRecognized(computed: AnyTouchEvent) {\n        this.lockDirection(computed);\n    }\n\n    /**\n     * 移除限制方向的deltaX/Y\n     * @param {AnyTouchEvent} computed \n     */\n    public lockDirection(computed: Computed): Computed {\n        if (undefined === this.options.directions || 0 === this.options.directions.length) return computed;\n        let deltaX = 0;\n        let deltaY = 0;\n        this.options.directions.forEach((direction: string) => {\n            if ('left' === direction && 0 > computed.deltaX) {\n                deltaX = computed.deltaX;\n            } else if ('right' === direction && 0 < computed.deltaX) {\n                deltaX = computed.deltaX;\n            } else if ('down' === direction && 0 < computed.deltaY) {\n                deltaY = computed.deltaY;\n            } else if ('up' === direction && 0 > computed.deltaY) {\n                deltaY = computed.deltaY;\n            }\n        });\n        computed.deltaX = deltaX;\n        computed.deltaY = deltaY;\n        return computed;\n    };\n};","import Recognizer from './Base';\nimport { AnyTouchEvent } from '../interface';\nimport { INPUT_END } from '../const';\nexport default class SwipeRecognizer extends Recognizer {\n    static DEFAULT_OPTIONS = {\n        name: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        pointLength: 1,\n        directions: ['up', 'right', 'down', 'left']\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        return ['none'];\n    };\n\n    /**\n     * 识别后发布swipeleft等事件\n     * @param {AnyTouchEvent} 计算数据\n     */\n    afterEmit(computed: AnyTouchEvent) {\n        if ('none' !== computed.direction) {\n            this.emit(this.options.name + computed.direction, computed);\n        }\n    };\n\n    /**\n     * 识别条件\n     * @param {AnyTouchEvent} 计算数据\n     */\n    test(computed: AnyTouchEvent): boolean {\n        if (INPUT_END !== computed.eventType) return false;\n\n        // 非end阶段, 开始校验数据\n        const { direction, velocityX, velocityY, maxPointLength, distance } = computed;\n        // 如果只支持水平或垂直, 那么其他方向速率为0;\n        // 有效速率\n        let vaildVelocityX: number = velocityX;\n        let vaildVelocityY: number = velocityY;\n        if (this.isOnlyHorizontal()) {\n            vaildVelocityY = 0;\n        } else if (this.isOnlyVertical()) {\n            vaildVelocityX = 0;\n        }\n\n        let vaildVelocity = Math.sqrt(vaildVelocityX * vaildVelocityX + vaildVelocityY * vaildVelocityY)\n\n        return 1 === maxPointLength &&\n            this.options.threshold < distance &&\n            this.isVaildDirection(direction) &&\n            this.options.velocity < vaildVelocity;\n    };\n};","import { AnyTouchEvent } from '../interface';\nimport Recognizer from './Base';\n\n\nexport default class PinchRecognizer extends Recognizer {\n    private _prevScale: number;\n    static DEFAULT_OPTIONS = {\n        name: 'pinch',\n        // 触发事件所需要的最小缩放比例\n        threshold: 0,\n        pointLength: 2,\n    };\n    constructor(options={}) {\n        super(options);\n        this._prevScale = 1;\n    };\n    \n    getTouchAction(){\n        return ['none'];\n    };\n\n    afterEmit(computed: AnyTouchEvent) {\n        if('end' === computed.eventType) return;\n        // pinchin | pinchout\n        const { scale } = computed;\n        if (1 !== scale) {\n            const inOrOut = scale > this._prevScale ? 'out' : 'in';\n            this.emit(this.options.name + inOrOut, computed);\n        }\n        this._prevScale = scale;\n    };\n\n    /**\n     * 识别条件\n     * @param {AnyTouchEvent} 计算数据\n     * @param {(isRecognized: boolean) => void}} 接收是否识别状态\n     */\n    test({ pointLength, scale }: AnyTouchEvent): boolean {\n        // 如果触碰点数要大于指定\n        // 如果缩放超过阈值, 或者已识别\n        // console.log({scale})\n        return this.isValidPointLength(pointLength) && (this.options.threshold < Math.abs(scale-1) || this.isRecognized);\n    };\n};","import Base from './Base';\nimport { AnyTouchEvent } from '../interface';\nexport default class RotateRecognizer extends Base {\n    static DEFAULT_OPTIONS = {\n        name: 'rotate',\n        // 触发事件所需要的最小角度\n        threshold: 0,\n        pointLength: 2,\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        return ['none'];\n    };\n\n    /**\n     * 无特殊事件要触发\n     */\n    afterEmit(computed: AnyTouchEvent) { };\n\n    /**\n     * 识别条件\n     * @param {AnyTouchEvent} 计算数据\n     * @return {Boolean} 接收是否识别状态\n     */\n    test({ pointLength, angle }: AnyTouchEvent): boolean {\n        // 如果触碰点数要大于指定\n        // 如果缩放超过阈值, 或者已识别\n        return this.isValidPointLength(pointLength) && (this.options.threshold < Math.abs(angle) || this.isRecognized);\n    };\n};","/**\n * ==================== 参考 ====================\n * https://segmentfault.com/a/1190000010511484#articleHeader0\n * https://segmentfault.com/a/1190000007448808#articleHeader1\n * hammer.js http://hammerjs.github.io/\n * \n * ==================== 支持的手势 ====================\n * rotate 旋转\n * pinch 捏合,\n * tap 单机\n * doubleTap 双击\n * press 按压\n * pan 拖拽\n * swipe 快划\n * \n * ==================== 流程 ====================\n * 格式化Event成统一的pointer格式 => 通过pointer数据计算 => 用计算结果去识别手势\n */\nimport { AnyTouchEvent, SupportEvent, CSSPreventMap } from './interface';\nimport AnyEvent from 'any-event';\nimport { SUPPORT_TOUCH, NONE } from './const';\nimport InputManage from './InputManage';\nimport computeTouchAction from './utils/computeTouchAction';\nimport Store from './Store';\n\n// 识别器\nimport Recognizer from './recognitions/Base';\nimport Tap from './recognitions/Tap';\nimport Press from './recognitions/Press';\nimport Pan from './recognitions/Pan';\nimport Swipe from './recognitions/Swipe';\nimport Pinch from './recognitions/Pinch';\nimport Rotate from './recognitions/Rotate';\nimport * as Vector from './vector';\ninterface Options {\n    touchAction?: 'compute' | 'auto' | 'manipulation' | 'pan-x' | 'pan-y' | 'none';\n    hasDomEvents?: boolean;\n    isPreventDefault?: boolean;\n    cssPrevent?: {\n        // 阻止触发选择文字\n        selectText?: boolean;\n        // 阻止触发浏览器默认拖拽\n        drag?: boolean;\n        // 隐藏高亮效果\n        tapHighlight?: boolean;\n        // 阻止默认菜单\n        callout?: boolean;\n    }\n};\nexport class AnyTouch {\n    // 识别器\n    static Tap = Tap;\n    static Press = Press;\n    static Pan = Pan;\n    static Swipe = Swipe;\n    static Pinch = Pinch;\n    static Rotate = Rotate;\n    static version = '__VERSION__';\n\n    // 向量计算\n    static Vector = Vector;\n\n    // mini的事件触发器\n    static EventEmitter = AnyEvent;\n\n    // 目标元素\n    el?: HTMLElement;\n\n    default: Options;\n\n    touchDevice: string;\n\n    recognizers: Recognizer[];\n\n    options: Options;\n\n    eventEmitter: AnyEvent;\n\n    inputManage: InputManage;\n\n    $store: Store;\n\n    // 是否阻止后面的识别器运行\n    private _isStopped: boolean;\n\n    /**\n     * @param {Element} 目标元素\n     * @param {Object} 选项\n     */\n    constructor(el?: HTMLElement, options?: Options) {\n        this.default = {\n            touchAction: 'compute',\n            hasDomEvents: true,\n            isPreventDefault: false,\n            cssPrevent: {\n                // 阻止触发选择文字\n                selectText: true,\n                // 阻止触发浏览器默认拖拽\n                drag: true,\n                // 隐藏高亮效果\n                tapHighlight: true,\n                // 阻止默认菜单\n                callout: true\n            }\n        };\n        if (undefined !== el) this.el = el;\n        this.$store = new Store();\n        this.inputManage = new InputManage({ $store: this.$store });\n        this.touchDevice = SUPPORT_TOUCH ? 'touch' : 'mouse';\n        this.options = { ...this.default, ...options };\n        // eventEmitter\n        this.eventEmitter = new AnyEvent();\n        this._isStopped = false;\n        // 识别器\n        // 注入当前方法和属性, 方便在识别器中调用类上的方法和属性\n        this.recognizers = [\n            new Rotate().$injectRoot(this),\n            new Pinch().$injectRoot(this),\n            new Pan().$injectRoot(this),\n            new Swipe().$injectRoot(this),\n            new Tap().$injectRoot(this),\n            new Tap({\n                name: 'doubletap',\n                pointLength: 1,\n                tapTimes: 2,\n                disabled: true\n            }).$injectRoot(this),\n            new Press().$injectRoot(this),\n        ];\n        // 默认单击需要双击识别失败后触发\n        this.recognizers[4].requireFailure(this.recognizers[5]);\n        if (undefined !== this.el) {\n            // 应用设置\n            this.update();\n            // 绑定事件\n            this.unbind = this._bindEL(this.el).unbind;\n        }\n    };\n\n    /**\n     * 计算touch-action\n     * @param {HTMLElement} 目标元素 \n     */\n    updateTouchAction() {\n        if ('compute' === this.options.touchAction) {\n            let touchActions = [];\n            for (let recognizer of this.recognizers) {\n                touchActions.push(...recognizer.getTouchAction());\n            };\n            this.el!.style.touchAction = computeTouchAction(touchActions);\n        } else {\n            this.el!.style.touchAction = this.options.touchAction || 'auto';\n        }\n    };\n\n    /**\n     * 设置\"阻止浏览器默认行为\"的css样式\n     */\n    updateCssPrevent() {\n        const style = <CSSPreventMap>{};\n        const { cssPrevent } = this.options;\n        if (undefined === cssPrevent) return;\n        if (cssPrevent.selectText) {\n            style['mozUserSelect'] = NONE;\n            style['userSelect'] = NONE;\n            style['msUserSelect'] = NONE;\n            style['webkitUserSelect'] = NONE;\n            style['msTouchSelect'] = NONE;\n        }\n\n        if (cssPrevent.drag) {\n            style['webkitUserDrag'] = NONE;\n        }\n\n        if (cssPrevent.tapHighlight) {\n            style['webkitTapHighlightColor'] = 'rgba(0,0,0,0)';\n        }\n\n        if(cssPrevent.callout){\n            style['webkitTouchCallout'] = NONE; \n        }\n        // 设置\n        for(let k in style) {\n            this.el!.style[k] = style[k];\n        }\n    };\n\n    /**\n     * 更新设置\n     */\n    public update() {\n        if (undefined === this.el) return;\n        this.updateTouchAction();\n        this.updateCssPrevent();\n    };\n\n    /**\n     * 绑定手势到指定元素\n     * 暂时只支持事件冒泡阶段触发, \n     * 改为捕获阶段需要对inputListener进行编号, \n     * 产生大量事件绑定,\n     * 而非在一次触发事件中执行所有手势判断\n     * @param {Element} 待绑定手势元素\n     */\n    private _bindEL(el: Element) {\n        const boundInputListener = <EventListener>this.inputListener.bind(this);\n        // Touch\n        if ('touch' === this.touchDevice) {\n            const events = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n            events.forEach(eventName => {\n                el.addEventListener(eventName, boundInputListener);\n            });\n            return {\n                unbind: () => {\n                    events.forEach(eventName => {\n                        el.removeEventListener(eventName, boundInputListener);\n                    });\n                }\n            }\n        }\n        // Mouse\n        else {\n            el.addEventListener('mousedown', boundInputListener);\n            window.addEventListener('mousemove', boundInputListener);\n            window.addEventListener('mouseup', boundInputListener);\n            return {\n                unbind: () => {\n                    el.removeEventListener('mousedown', boundInputListener);\n                    window.removeEventListener('mousemove', boundInputListener);\n                    window.removeEventListener('mouseup', boundInputListener);\n                }\n            };\n        }\n    };\n\n    /**\n     * 为微信设计的功能\n     * 接收touch事件的event对象\n     * @param {SupportEvent} 事件对象\n     */\n    useEvent(event: SupportEvent) {\n        this.inputListener(event);\n    };\n\n    /**\n     * 添加识别器\n     * @param recognizer 识别器\n     */\n    add(recognizer: Recognizer): void {\n        recognizer.$injectRoot(this);\n        const hasSameName = this.recognizers.some((theRecognizer: Recognizer) => recognizer.name === theRecognizer.name);\n        if (hasSameName) {\n            this.eventEmitter.emit('error', { code: 1, message: `${recognizer.name}识别器已经存在!` })\n        } else {\n            this.recognizers.push(recognizer);\n            this.update();\n        }\n    };\n\n    /**\n     * 获取识别器通过名字\n     * @param {String} 识别器的名字\n     * @return {Recognizer|undefined} 返回识别器\n     */\n    get(name: string): Recognizer | undefined {\n        return this.recognizers.find(recognizer => name === recognizer.options.name);\n    };\n\n    /**\n     * 设置\n     * @param {Options} 选项 \n     */\n    set(options: Options): void {\n        this.options = { ...this.default, ...options };\n        this.update();\n    };\n\n    /**\n     * 停止识别\n     */\n    stop() {\n        this._isStopped = true;\n    }\n\n    /**\n     * 删除识别器\n     * @param {String} 识别器name\n     */\n    remove(recognizerName: string): void {\n        for (let [index, recognizer] of this.recognizers.entries()) {\n            if (recognizerName === recognizer.options.name) {\n                this.recognizers.splice(index, 1);\n                break;\n            }\n        }\n    };\n\n    /**\n     * 监听input变化\n     * @param {Event}\n     */\n    inputListener(event: SupportEvent): void {\n        if (this.options.isPreventDefault) {\n            event.preventDefault();\n        }\n\n        // if (!event.cancelable) {\n        //     this.eventEmitter.emit('error', { code: 0, message: '页面滚动的时候, 请暂时不要操作元素!' });\n        // }\n\n        // 管理历史input\n        // 生成AnyTouchEvent\n        const computed = this.inputManage.load(event);\n        // 跳过无效输入\n        // 如: 当是鼠标事件的时候, 会有undefined的时候\n        if (undefined !== computed) {\n            // input事件\n            this.emit('input', computed);\n            if (computed.isStart) {\n                // $store.reset();\n                this._isStopped = false;\n                this.emit('inputstart', computed);\n            } else if (computed.isEnd) {\n                if ('cancel' === computed.eventType) {\n                    this.emit('inputcancel', computed);\n                } else {\n                    this.emit('inputend', computed);\n                }\n            } else {\n                // prevInput和input一定不为空\n                if (this.inputManage.prevInput!.pointLength > this.inputManage.activeInput!.pointLength) {\n                    this.emit('inputreduce', computed);\n                } else if (this.inputManage.prevInput!.pointLength < this.inputManage.activeInput!.pointLength) {\n                    this.emit('inputadd', computed);\n                } else {\n                    this.emit('inputmove', computed);\n                }\n            };\n\n            for (let recognizer of this.recognizers) {\n                if (recognizer.disabled) continue;\n                // 如果遇到停止标记, 立即停止运行后面的识别器\n                recognizer.recognize(computed);\n                if (this._isStopped) {\n                    break;\n                }\n            }\n        }\n    };\n\n    /**\n     * 注册事件\n     * @param {String} 事件名\n     * @param {Function} 回调函数\n     */\n    on(type: string, listener: (event: AnyTouchEvent) => void, options: { [k: string]: boolean } | boolean = false): void {\n        this.eventEmitter.on(type, listener);\n    };\n\n    /**\n     * 解绑事件\n     * @param {String} 事件名 \n     * @param {Function} 事件回调\n     */\n    off(type: string, listener?: (event: AnyTouchEvent) => void): void {\n        this.eventEmitter.off(type, listener);\n    };\n\n    /**\n     * 触发事件, 同时type会作为payload的一个键值\n     * @param {String} 类型名\n     * @param {Object} 数据\n     */\n    emit(type: string, payload: AnyTouchEvent) {\n        this.eventEmitter.emit(type, { ...payload, type });\n    };\n\n    /**\n     * 解绑所有触摸事件\n     */\n    unbind(): void { };\n\n    /**\n     * 销毁\n     */\n    destroy() {\n        this.$store.destroy();\n        // 解绑事件\n        this.unbind();\n        this.eventEmitter.destroy();\n    };\n};","/**\n * 管理实例和元素的映射关系\n * 一个元素只能对应一个实例\n */\nexport default class <T extends { new(...arys: any): any }> {\n    // 存储映射关系\n    stock: { el: HTMLElement, instance: InstanceType<T> }[] = [];\n    ClassObject: T;\n\n    constructor(ClassObject: T) {\n        this.stock = [];\n        this.ClassObject = ClassObject;\n    };\n\n    /**\n    * 获取元素在stock中的索引\n    * @param {Element} 元素 \n    * @returns {Number} 元素索引 \n    */\n    getIndexByEl(el: HTMLElement): number {\n        for (let i = 0, len = this.stock.length; i < len; i++) {\n            if (el === this.stock[i].el) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * 获取实例\n     * @param {Number} 索引\n     * @return {InstanceType<T>} 实例 \n     */\n    getInstanceByIndex(index: number): InstanceType<T> {\n        return this.stock[index]!.instance;\n    };\n\n    /**\n     * 删除指定实例\n     * @param {Number} 索引\n     */\n    removeInstanceByIndex(index: number): void {\n        this.stock.splice(index, 1);\n    };\n\n    /**\n     * 获取实例, 如果没有新建\n     * @param {Element} 目标元素\n     * @param {InstanceType<T>}  InstanceType<T>实例\n     */\n    getOrCreateInstanceByEl(el: HTMLElement): InstanceType<T> {\n        const manageIndex = this.getIndexByEl(el);\n        // 防止同一个元素上同一个指令实例化多个InstanceType<T>\n        if (-1 === manageIndex) {\n            // 新建实例\n            const instance = new this.ClassObject(el);\n            this.stock.push({el, instance});\n            return instance;\n        } else {\n            return this.getInstanceByIndex(manageIndex);\n        }\n    };\n};","// 注意: 由于vue指令没办法对指令进行优先级设置, 所以指令版本并不能实现AnyTouch所有的功能,\n// 比如新建手势. 所以指令版只支持tap/doubletap/pan/swipe/rotate/pinch等默认手势\nimport { AnyTouchEvent } from '../interface';\nimport { VueConstructor } from 'vue/types/vue';\nimport { DirectiveBinding } from 'vue/types/options';\nimport InstanceManage from './InstanceManage';\nimport { AnyTouch } from '../AnyTouch';\n\n// 管理实例和元素的映射关系\nconst iManage = new InstanceManage(AnyTouch);\n// 导出指令\nconst plugin = {\n    install(Vue: VueConstructor) {\n        const _bindEvent = (el: HTMLElement, binding: DirectiveBinding) => {\n            let instance = iManage.getOrCreateInstanceByEl(el);\n            // 导入AnyTouch实例\n            if (undefined !== binding.value) {\n                binding.value(instance);\n            }\n        };\n\n        /**\n         * 解除绑定事件\n         * @param {Element} 关联元素 \n         */\n        const _unbindEvent = (el: HTMLElement) => {\n            const index = iManage.getIndexByEl(el);\n            // 防止一个元素上的多个手势指令会重复触发删除\n            if (-1 !== index && undefined !== iManage.getInstanceByIndex(index)) {\n                iManage.getInstanceByIndex(index).destroy();\n                iManage.removeInstanceByIndex(index);\n            }\n        };\n\n        Vue.directive('touch', {\n            inserted(el, binding) {\n                _bindEvent(el, binding);\n            },\n\n            update(el, binding) {\n                _bindEvent(el, binding);\n            },\n\n            unbind(el) {\n                _unbindEvent(el);\n            }\n        });\n    }\n};\n\n// if('test' !== process.env.NODE_ENV){\n    \n// }\n// 自动加载插件\n// if (typeof <any>window !== 'undefined' && (<any>window).Vue) {\n//     (<any>window).Vue.use(plugin);\n// };\n\nexport default plugin;\n","import { AnyTouch } from './AnyTouch';\nimport VueDirective from './vueDirective';\nexport default class extends AnyTouch {\n    // vue指令版\n    static vTouch = VueDirective;\n}"],"names":["tslib_1.__values","tslib_1.__extends","default_1","Adapter","Touch","Mouse","InputFactory","Base","Store","InputManage","Rotate","Pinch","Pan","Swipe","Tap","Press","InstanceManage","VueDirective"],"mappings":"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"}