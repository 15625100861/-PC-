{"version":3,"file":"AnyTouch.umd.js","sources":["../node_modules/any-event/dist/AnyEvent.es.js","../src/const.ts","../src/vector.ts","../src/input/adapters/Touch.ts","../src/input/adapters/mouse.ts","../src/input/InputFactory.ts","../src/InputManage.ts","../src/compute/computeLast.ts","../src/compute/computeDistance.ts","../src/compute/computeDeltaXY.ts","../src/compute/computeVector.ts","../src/compute/computeScale.ts","../src/compute/computeAngle.ts","../src/compute/computeMaxLength.ts","../src/compute/index.ts","../src/untils/computeTouchAction.ts","../src/const/recognizerStatus.ts","../src/recognitions/Base.ts","../src/recognitions/Tap.ts","../src/recognitions/Press.ts","../src/untils/getHV.ts","../src/recognitions/Pan.ts","../src/recognitions/Swipe.ts","../src/recognitions/Pinch.ts","../src/recognitions/Rotate.ts","../src/AnyTouch.ts","../src/vueDirective/InstanceManage.ts","../src/vueDirective/index.ts","../src/main.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\nvar EventEmitter = (function () {\n    function EventEmitter() {\n        this._listenersMap = {};\n    }\n    EventEmitter.prototype.on = function (eventName, listener) {\n        if (undefined === this._listenersMap[eventName]) {\n            this._listenersMap[eventName] = [];\n        }\n        this._listenersMap[eventName].push(listener);\n        return this;\n    };\n    EventEmitter.prototype.once = function (eventName, listener) {\n        listener.isOnce = true;\n        this.on(eventName, listener);\n        return this;\n    };\n    EventEmitter.prototype.off = function (eventName, listener) {\n        var listeners = this._listenersMap[eventName];\n        if (undefined !== listeners) {\n            if (undefined === listener) {\n                delete this._listenersMap[eventName];\n            }\n            else {\n                var index = listeners.findIndex(function (fn) { return fn === listener; });\n                listeners.splice(index, 1);\n            }\n        }\n        return this;\n    };\n    EventEmitter.prototype.emit = function (eventName) {\n        var payload = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            payload[_i - 1] = arguments[_i];\n        }\n        var e_1, _a;\n        var listeners = this._listenersMap[eventName];\n        if (undefined !== listeners && 0 < listeners.length) {\n            try {\n                for (var _b = __values(listeners.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = __read(_c.value, 2), index = _d[0], listener = _d[1];\n                    if (listener.isOnce) {\n                        var listenerClone = listener;\n                        listeners.splice(index, 1);\n                        listenerClone.apply(void 0, __spread(payload));\n                    }\n                    else {\n                        listener.apply(void 0, __spread(payload));\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    EventEmitter.prototype.has = function (eventName) {\n        return undefined !== this._listenersMap[eventName] && 0 < this._listenersMap[eventName].length;\n    };\n    EventEmitter.prototype.getEventNames = function () {\n        var eventNames = [];\n        for (var eventName in this._listenersMap) {\n            eventNames.push(eventName);\n        }\n        return eventNames;\n    };\n    EventEmitter.prototype.eventNames = function () {\n        return this.getEventNames();\n    };\n    EventEmitter.prototype.destroy = function () {\n        this._listenersMap = {};\n    };\n    return EventEmitter;\n}());\n\nexport default EventEmitter;\n","// 简单判断是否手机设备\nexport const MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n// console.log('ua', navigator.userAgent);\n// 是否手机设备\nexport const IS_MOBILE = MOBILE_REGEX.test(navigator.userAgent);\n\n// 是否支持touch事件\nexport const SUPPORT_TOUCH = ('ontouchstart' in window);\n// 是否是移动设备\nexport const SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\n// 方向\nexport const DIRECTION_NONE = 1; // 0000 0001\nexport const DIRECTION_LEFT = 2; //  0000 0010\nexport const DIRECTION_RIGHT = 4; // 0000 0100 \nexport const DIRECTION_UP = 8; // 0000 1000\nexport const DIRECTION_DOWN = 16; // 0001 0000\n\n// 位运算 求值 对上上面的4个方向可以简单理解为\"+\"\nexport const DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT; // 6\nexport const DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN; // 24\nexport const DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL; // 30\n\n// 计算触发时间间隔, 防止事件触发就一直计算\nexport const COMPUTE_INTERVAL = 25;\n\n\n// 计算时候取touchs.clientX | clientY\nexport const propX = 'clientX';\nexport const propY = 'clientY';\nexport const CLIENT_X = 'clientX';\nexport const CLIENT_Y = 'clientY';\n\n\n// 识别器状态码\nexport const RECOGNIZER_STATUS_POSSIBLE = 1;\nexport const RECOGNIZER_STATUS_BEGAN = 2;\nexport const RECOGNIZER_STATUS_CHANGED = 4;\nexport const RECOGNIZER_STATUS_ENDED = 8;\nexport const RECOGNIZER_STATUS_RECOGNIZED = RECOGNIZER_STATUS_ENDED;\nexport const RECOGNIZER_STATUS_CANCELLED = 16;\nexport const RECOGNIZER_STATUS_FAILED = 32;\n\n// input的类型\nexport const INPUT_START = 'start';\nexport const INPUT_MOVE = 'move';\nexport const INPUT_CANCEL = 'cancel';\nexport const INPUT_END = 'end';\n","import { propX, propY } from './const';\ninterface Vector {\n    x: number;\n    y: number;\n}\nconst { round } = Math;\n/**\n * 获取向量长度(向量模)\n * @param {Object} 向 量\n */\nexport const getVLength = (v: Vector): number => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * 点积\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getDotProduct = (v1: Vector, v2: Vector) => {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\n/**\n * 向量夹角(弧度)\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getRadian = (v1: Vector, v2: Vector) => {\n    var mr = getVLength(v1) * getVLength(v2);\n    if (mr === 0) return 0;\n    var r = getDotProduct(v1, v2) / mr;\n    if (r > 1) r = 1;\n    return Math.acos(r);\n}\n\n/**\n * 求旋转方向\n * 顺时针/逆时针\n */\nexport const getCross = (v1: Vector, v2: Vector) => {\n    return v1.x * v2.y - v2.x * v1.y;\n}\n\n/**\n * 向量夹角(角度)\n * @param {Object} v1\n * @param {Object} v2\n */\nexport const getAngle = (v1: Vector, v2: Vector) => {\n    var angle = getRadian(v1, v2);\n    if (getCross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return radianToAngle(angle);\n};\n\n/**\n * 弧度转角度\n * @param {Number} 弧度 \n */\nexport const radianToAngle = (radian: number): number => radian / Math.PI * 180;\n\n/**\n * 角度转弧度\n * @param {Number} 角度 \n */\nexport const angleToRadian = (angle: number): number => angle / 180 * Math.PI;\n\n/**\n * 获取多点之间的中心坐标\n * @param {Array} 触碰点 \n */\nexport const getCenter = (points: any) => {\n    const pointLength = points.length;\n    if (1 < pointLength) {\n        let x = 0;\n        let y = 0;\n        let i = 0;\n        while (i < pointLength) {\n            x += points[i][propX];\n            y += points[i][propY];\n            i++;\n        }\n\n        return {\n            x: round(x / pointLength),\n            y: round(y / pointLength)\n        };\n    } else {\n        return { x: round(points[0][propX]), y: round(points[0][propY]) };\n    }\n};\n\n/**\n * \n * @param {Number} 事件开始到结束的X位移 \n* @param {Number} 事件开始到结束的Y位移 \n */\nexport const getDirection = (x: number, y: number): string | void => {\n    if (x === y) {\n        return 'none';\n    } else if (Math.abs(x) > Math.abs(y)) {\n        return 0 < x ? 'right' : 'left';\n    } else {\n        return 0 < y ? 'down' : 'up';\n    }\n};\n","export default class {\n    constructor() {\n\n    };\n\n    load(event: TouchEvent): any {\n        const points = Array.from(event.touches).map(({ clientX, clientY }) => ({ clientX, clientY }));\n        const changedPoints = Array.from(event.changedTouches).map(({ clientX, clientY }) => ({ clientX, clientY }));\n        const eventType = event.type.replace('touch', '');\n        return {\n            eventType,\n            changedPoints,\n            points,\n            nativeEvent: event\n        };\n    }\n}; ","import { BaseInput, eventType } from '../../interface';\n\n// 默认MouseEvent中对type声明仅为string\nexport default class {\n    prevPoints?: { clientX: number, clientY: number }[];\n    isPressed: boolean;\n    constructor() {\n        this.isPressed = false;\n    };\n\n    load(event: MouseEvent): BaseInput | void {\n        let { clientX, clientY, type, button } = event;\n\n        // changedPoints = prevPoints其实并不能完全等于touch下的changedPoints\n        // 但是由于鼠标没有多点输入的需求, \n        // 所以暂时如此实现\n        const changedPoints = this.prevPoints || [{ clientX, clientY }];\n\n        let points = [{ clientX, clientY }];\n        this.prevPoints = [{ clientX, clientY }];\n\n        // 必须左键\n        if ('mousedown' === type) {\n            if (0 === button) {\n                this.isPressed = true;\n            } else {\n                return;\n            }\n        }\n\n        if ('mousemove' === type) {\n            if (!this.isPressed) return;\n            // 确保移动过程中, 一直按住的都是左键,\n            // if(1 !== event.which) {\n            //     type = 'mouseup'\n            // }\n        } else if ('mouseup' === type) {\n            if (this.isPressed) {\n                points = [];\n            } else {\n                return;\n            };\n            this.isPressed = false;\n        }\n\n        const MAP = {\n            mousedown: 'start',\n            mousemove: 'move',\n            mouseup: 'end'\n        };\n\n        return {\n            eventType: <eventType>MAP[<'mousedown' | 'mousemove' | 'mouseup'>type],\n            changedPoints,\n            points,\n            nativeEvent: event\n        };\n    }\n}; ","/**\n * 构造统一的Input格式\n */\nimport { Input, Point } from '../interface';\nimport { SUPPORT_TOUCH, INPUT_END, INPUT_START, INPUT_CANCEL } from '../const';\nimport { getCenter } from '../vector';\nimport Touch from './adapters/Touch';\nimport Mouse from './adapters/mouse';\n\nexport default class {\n    // 缓存触点中心\n    private _center?: Point;\n    public adapter: any;\n    constructor() {\n        this.adapter = SUPPORT_TOUCH ? new Touch() : new Mouse();\n    };\n\n    public load(event: Event): Input | void {\n        // 通过TouchEvent|MouseEvent获取的直接数据\n        let baseInput = this.adapter.load(event);\n        if (undefined === baseInput) {\n            return;\n        }\n        const { eventType, points, changedPoints } = baseInput;\n        // 当前触点数\n        const pointLength: number = points.length;\n\n        // 变化前触点数\n        const changedPointLength: number = changedPoints.length;\n        // 识别流程的开始和结束标记\n        const isFirst = (INPUT_START === eventType) && (0 === changedPointLength - pointLength);\n        // 所有触点都离开算作\"final\", 这和hammer.js不一样\n        const isFinal = (INPUT_END === eventType || INPUT_CANCEL === eventType) && (0 === pointLength);\n\n        // 中心坐标\n        if (0 < pointLength) {\n            this._center = getCenter(baseInput.points);\n        }\n\n        // 当前时间\n        const timestamp = Date.now();\n\n        // 原生属性/方法\n        const { target, currentTarget } = event;\n        const { x, y } = <Point>(this._center || {});\n        return {\n            ...baseInput,\n            preventDefault: () => {\n                event.preventDefault();\n            },\n            isFirst,\n            isFinal,\n            pointLength,\n            changedPointLength,\n            center: this._center,\n            x, y,\n            timestamp,\n            target,\n            currentTarget,\n            nativeEvent: event\n        };\n    };\n}","import { Input } from './interface';\nimport InputFactory from './input/InputFactory';\nexport default class {\n    // 起点(单点|多点)\n    startInput?: Input;\n    // 前一次的触电\n    prevInput?: Input;\n    // 当前触点\n    activeInput?: Input;\n    // 多点触碰的起点\n    startMutliInput?: Input;\n\n    inputFactory: InputFactory;\n\n    constructor() {\n        this.inputFactory = new InputFactory();\n    };\n\n\n    load(event: Event): {\n        startInput?: Input,\n        prevInput?: Input,\n        input?: Input,\n        startMutliInput?: Input\n    } | void {\n        // 格式化不同设备输入数据\n        const input = this.inputFactory.load(event);\n\n        // 无效的输入    \n        if (undefined === input) return;\n\n        // 当前输入状态\n        const { eventType } = input;\n\n        // [Start]\n        if ('start' === eventType) {\n            // 上一步的触点\n            // prevInput = undefined;\n            // 当前点\n            this.activeInput = input;\n            // 起点(单点|多点)\n            this.startInput = input;\n            // 起点(多点)\n            if (1 < input.pointLength) {\n                this.startMutliInput = input;\n            } else {\n                // 如果出现了单点, 那么之前的多点起点记录失效\n                this.startMutliInput = undefined;\n            }\n        } else if ('move' === eventType) {\n            // 读取上一点\n            this.prevInput = this.activeInput;\n            this.activeInput = input;\n        } else if ('end' === eventType) {\n            this.prevInput = this.activeInput;\n            this.activeInput = input;\n            // console.log(this.startInput, this.el.id);\n        }\n        return {\n            startMutliInput: this.startMutliInput,\n            startInput: this.startInput,\n            prevInput: this.prevInput,\n            input\n        };\n    };\n}; ","// 返回最近一个时间段的计算结果\n// 默认间隔25ms做一次计算, 让数据更新,\n// 让end阶段读取上一步的计算数据, 比如方向, 速率等...\n// 防止快速滑动到慢速滑动的手势识别成swipe\nimport { Input } from '../interface';\nimport { COMPUTE_INTERVAL, INPUT_CANCEL } from '../const';\nimport { getDirection } from '../vector';\n// 上次采集的input\nlet _prevInput: Input;\n// 上次采集时的瞬时速度\nlet _prevVelocityX: number;\nlet _prevVelocityY: number;\n// 上次采集的方向\nlet _prevDirection: string;\n\nexport default (input: Input): { velocityX: number, velocityY: number, direction?: string } => {\n    // 速率\n    let velocityX: number;\n    let velocityY: number;\n    // 方向\n    let direction: string;\n\n    // _prevInput || input用来保证deltaX等不会有undefined参与计算\n    _prevInput = _prevInput || input;\n    const deltaTime = input.timestamp - _prevInput.timestamp;\n    const deltaX = (0 < input.x) ? input.x - _prevInput.x : 0;\n    const deltaY = (0 < input.y) ? input.y - _prevInput.y : 0;\n    // 每25ms刷新速度数据\n    if (INPUT_CANCEL !== input.eventType && COMPUTE_INTERVAL < deltaTime || undefined === _prevDirection) {\n        velocityX = Math.round(Math.abs(deltaX / deltaTime) * 100) / 100;\n        velocityY = Math.round(Math.abs(deltaY / deltaTime) * 100) / 100;\n        direction = getDirection(deltaX, deltaY) || _prevDirection;\n        // 存储状态\n        _prevVelocityX = velocityX;\n        _prevVelocityY = velocityY;\n        _prevDirection = direction;\n        _prevInput = input;\n    } else {\n        velocityX = _prevVelocityX || 0;\n        velocityY = _prevVelocityY || 0;\n        direction = _prevDirection;\n    }\n\n    return {velocityX, velocityY, direction };\n};","\nlet prevDisplacementX = 0;\nlet prevDisplacementY = 0;\nimport { propX, propY } from '../const';\nimport { getVLength } from '../vector';\nexport default function ({\n    startInput,\n    input\n}: any): any {\n    const { eventType } = input;\n    const { round, abs } = Math;\n    let displacementX = 0;\n    let displacementY = 0;\n    if ('start' === eventType) {\n        prevDisplacementX = prevDisplacementY = 0;\n    } else if ('move' === eventType) {\n        displacementX = round(input.points[0][propX] - startInput.points[0][propX]);\n        displacementY = round(input.points[0][propY] - startInput.points[0][propY]);\n\n        // 记录本次位移\n        prevDisplacementX = displacementX;\n        prevDisplacementY = displacementY;\n    } else if ('end' === eventType) {\n        displacementX = prevDisplacementX;\n        displacementY = prevDisplacementY;\n    }\n\n    let distanceX = abs(displacementX);\n    let distanceY = abs(displacementY);\n    let distance = round(getVLength({ x: distanceX, y: distanceY }));\n    return {\n        displacementX, displacementY, distanceX, distanceY, distance\n    };\n};","import { radianToAngle } from '../vector';\nlet lastDeltaXYAngle = 0;\nexport default function ({\n    prevInput,\n    input\n}: any): { deltaX: number, deltaY: number, deltaXYAngle: number } {\n    // 每次事件触发时位移的变化\n    let deltaX: number;\n    let deltaY: number;\n    // deltaX/Y与2者合位移的角度\n    let deltaXYAngle: number = 0;\n\n    // 计算deltaX/Y\n    if ('end' === input.eventType || 'start' === input.eventType) {\n        deltaX = 0;\n        deltaY = 0;\n    } else {\n        deltaX = input.x - prevInput.x;\n        deltaY = input.y - prevInput.y;\n    }\n\n    // 计算deltaXAngle / deltaYAngle\n    if (0 !== deltaX || 0 !== deltaY) {\n        const deltaXY = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n        deltaXYAngle = Math.round(radianToAngle(Math.acos(Math.abs(deltaX) / deltaXY)));\n        lastDeltaXYAngle = deltaXYAngle;\n    } else {\n        deltaXYAngle = lastDeltaXYAngle;\n    }\n\n    return { deltaX, deltaY, deltaXYAngle };\n};","import { propX, propY } from '../const';\nexport default (input: any): { x: number, y: number } => ({\n    x: input.points[1][propX] - input.points[0][propX],\n    y: input.points[1][propY] - input.points[0][propY]\n});","import { getVLength } from '../vector';\nexport default function ({\n    startV, prevV, activeV\n}: any): { scale: number, deltaScale: number } {\n    const deltaScale = getVLength(activeV) / getVLength(prevV);\n    const scale = getVLength(activeV) / getVLength(startV);\n    return { scale, deltaScale };\n};","import { getAngle } from '../vector';\nexport default function ({\n    startV, prevV, activeV\n}: any): { angle: number, deltaAngle: number } {\n    const deltaAngle = getAngle(activeV, prevV);\n    const angle = getAngle(activeV, startV);\n    return { angle, deltaAngle };\n};","import { Input } from '../interface';\nlet maxLength = 0;\nexport default ({ pointLength, isFirst, isFinal }: Input): number => {\n    if (isFirst) {\n        maxLength = pointLength;\n    } else {\n        maxLength = Math.max(maxLength, pointLength);\n    }\n    return maxLength;\n};","\nimport { Computed, directionString } from '../interface';\nimport { getDirection, getCenter } from '../vector';\nimport computeLast from './computeLast';\nimport computeDistance from './computeDistance';\nimport computeDeltaXY from './computeDeltaXY';\nimport computeVector from './computeVector';\nimport computeScale from './computeScale';\nimport computeAngle from './computeAngle';\nimport computeMaxLength from './computeMaxLength';\n\nlet prevScale = 1;\nlet prevAngle = 0;\n\n// 最大触点数\nexport default function ({\n    startInput,\n    prevInput,\n    startMutliInput,\n    input\n}: any): Computed {\n    // ========= 整体距离/位移=========\n    const { displacementX, displacementY, distanceX, distanceY, distance } = computeDistance({\n        startInput,\n        input\n    });\n\n    // ========= 方向 =========\n    const overallDirection = <directionString>getDirection(displacementX, displacementY);\n\n    // ========= 已消耗时间 =========\n    const deltaTime = input.timestamp - startInput.timestamp;\n\n    // ========= 最近25ms内计算数据, 瞬时数据 =========\n    const lastComputed = computeLast(input);\n    const velocityX = lastComputed.velocityX;\n    const velocityY = lastComputed.velocityY;\n    const direction = <directionString>lastComputed.direction;\n\n\n    // ========= 中心点位移增量 =========\n    let { deltaX, deltaY, deltaXYAngle } = computeDeltaXY({ input, prevInput });\n\n\n    // ========= 多点计算 =========\n    // 上一触点数大于1, 当前触点大于1\n    let scale = 1;\n    let deltaScale = 0;\n    let angle = 0;\n    let deltaAngle = 0;\n    if (undefined !== prevInput && 1 < prevInput.points.length && 1 < input.points.length) {\n        // 2指形成的向量\n        const startV = computeVector(startMutliInput);\n        const prevV = computeVector(prevInput);\n        const activeV = computeVector(input);\n        // 计算缩放\n        const scaling = computeScale({\n            startV, activeV, prevV\n        });\n        scale = scaling.scale;\n        deltaScale = scaling.deltaScale;\n\n        // ========= 计算旋转角度 =========\n        const rotation = computeAngle({ startV, prevV, activeV });\n        angle = rotation.angle;\n        deltaAngle = rotation.deltaAngle;\n        prevAngle = angle;\n        prevScale = scale;\n    } else {\n        scale = prevScale;\n        deltaScale = 1;\n        angle = prevAngle;\n        deltaAngle = 0;\n    }\n\n    // ========= 最大触点数 =========\n    return {\n        ...input,\n        velocityX,\n        velocityY,\n        deltaTime,\n        overallDirection,\n        direction,\n        deltaX, deltaY, deltaXYAngle,\n        displacementX,\n        displacementY,\n        distanceX,\n        distanceY,\n        distance,\n        scale,\n        deltaScale,\n        angle,\n        deltaAngle,\n        maxpointLength: computeMaxLength(input)\n    };\n};","export default (touchActions: string[]): string => {\n    // 表示优先级\n    const TOUCH_ACTION_PRIORITY: { [propName: string]: number } = {\n        auto: 0,\n        manipulation: 1,\n        'pan-x': 2,\n        'pan-y': 2,\n        none: 3\n    };\n\n    // 最大优先级\n    const MAX_PRIORITY = TOUCH_ACTION_PRIORITY['none'];\n\n    // 最终的有效的touch-action会放在数组中\n    let touchActionCSSArray: string[] = ['auto'];\n    // 上一步计算的touch-action的优先级\n    let prevPriority = 0;\n    for (let touchAction of touchActions) {\n\n        // 当前优先级\n        let activePriority = TOUCH_ACTION_PRIORITY[touchAction];\n\n        // 如果是最大优先级, 那么后面就不用计算了\n        if (MAX_PRIORITY === activePriority) {\n            touchActionCSSArray = [touchAction];\n            break;\n        }\n        // 当前优先级大, 那么覆盖touch-action\n        else if (prevPriority < activePriority) {\n            touchActionCSSArray = [touchAction];\n            prevPriority = activePriority;\n        }\n        // 如果相等那么加入当前touch-action, 例如pan-x/pan-y可以并存\n        else if (prevPriority === activePriority && 0 < activePriority) {\n            touchActionCSSArray.push(touchAction);\n            prevPriority = activePriority;\n        }\n        \n    }\n    return touchActionCSSArray.join(' ');\n};","// 识别器状态码\n// 注意: 此处的值会直接被事件名所用, 如panstart/panmove等等\nexport const STATUS_POSSIBLE = 'possible';\nexport const STATUS_START = 'start';\nexport const STATUS_MOVE = 'move';\nexport const STATUS_END = 'end';\nexport const STATUS_CANCELLED = 'cancel';\nexport const STATUS_FAILED = 'failed';\nexport const STATUS_RECOGNIZED = 'recognized';","import { Computed, directionString } from '../interface';\nimport { INPUT_CANCEL, INPUT_END, INPUT_MOVE } from '../const';\nimport {\n    STATUS_POSSIBLE,\n    STATUS_START,\n    STATUS_MOVE,\n    STATUS_END,\n    STATUS_CANCELLED,\n    STATUS_FAILED, STATUS_RECOGNIZED\n} from '../const/recognizerStatus';\n\nexport default abstract class Recognizer {\n    // 手势名\n    public name: string;\n    // 是否禁止\n    public disabled: boolean;\n    // 识别状态\n    public status: string;\n    // 是否已识别\n    public isRecognized: boolean;\n    // 选项\n    public options: { [propName: string]: any };\n    // 需要对应手势失败才能识别成功\n    public requireFailureRecognizers: any[];\n    // 存储外部注入方法的容器\n    public $root: any;\n\n    public eventEmitter: any;\n\n    constructor(options: { name?: string, [k: string]: any }) {\n        this.options = { ...(<any>this.constructor).DEFAULT_OPTIONS, disabled: false, ...options };\n        this.name = this.options.name;\n        this.disabled = this.options.disabled;\n        this.status = STATUS_POSSIBLE;\n        this.isRecognized = false;\n        this.requireFailureRecognizers = [];\n        // 这里面不能直接调用$root等, \n        // 因为rollup生成的代码构造函数并不是该constructor\n        // 而是构造函数中又嵌套了一个同名构造函数\n    };\n\n    /**\n     * 设置识别器\n     * @param {Object} 选项 \n     */\n    public set(options = {}) {\n        this.options = { ...this.options, ...options };\n        // 刷新anyTouch\n        this.$root.update();\n        return this;\n    };\n\n    public $injectRoot($root: any) {\n        this.$root = $root;\n        return this;\n    }\n\n    /**\n     * 对eventEmitter进行封装\n     * @param type \n     * @param payload \n     */\n    public emit(type: string, payload: any) {\n        payload.type = type;\n        this.$root.eventEmitter.emit(type, payload);\n        if (this.$root.options.hasDomEvents) {\n            // 过滤掉几个Event上保留的字段\n            let { target, currentTarget, type, ...data } = payload;\n            let event = new Event(type, payload);\n            Object.assign(event, data);\n            this.$root.el.dispatchEvent(event);\n        }\n    };\n\n    /**\n     * 前者需要后者识别失败才能触发\n     * @param {Recognizer} 识别器实例 \n     */\n    public requireFailure(recognizer: this) {\n        if (!this.requireFailureRecognizers.includes(recognizer)) {\n            this.requireFailureRecognizers.push(recognizer);\n        }\n    };\n\n    /**\n     * 移除识别器之间的\"需要失败\"关系\n     *  @param {Recognizer} 识别器实例 \n     */\n    public removeRequireFailure(recognizer: Recognizer) {\n        for (let [index, requireFailureRecognizer] of this.requireFailureRecognizers.entries()) {\n            if (requireFailureRecognizer.name === recognizer.name) {\n                this.requireFailureRecognizers.splice(index, 1);\n                break;\n            }\n        }\n    };\n\n    /**\n     * 是否需要其他手势失败才能触发\n     */\n    public hasRequireFailure() {\n        return 0 < this.requireFailureRecognizers.length;\n    };\n\n    /**\n     * 是否所有\"需要失败\"的手势都是disabled的\n     */\n    public isAllRequireFailureRecognizersDisabled(){\n        return this.requireFailureRecognizers.every((recognizer:any)=>recognizer.disabled);\n    };\n\n    /**\n     * 是否要求注册时指定失败的选择器是失败状态\n     */\n    public isAllRequiresFailedOrPossible(): boolean {\n        for (let recognizer of this.requireFailureRecognizers) {\n            if (STATUS_FAILED !== recognizer.status && STATUS_POSSIBLE !== recognizer.status) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * 验证触点\n     * @param {Number} 触点数\n     */\n    public isValidPointLength(pointLength: number): boolean {\n        return 0 === this.options.pointLength || this.options.pointLength === pointLength\n    };\n\n    /**\n     * 是否只支持水平方向\n     */\n    public isOnlyHorizontal() {\n        let isOnlyHorizontal = true;\n        for (let direction of this.options.directions) {\n            isOnlyHorizontal = -1 < ['left', 'right'].indexOf(direction);\n            if (!isOnlyHorizontal) {\n                return false;\n            }\n        }\n        return isOnlyHorizontal;\n    };\n\n    /**\n     * 是否只支持垂直方向\n     */\n    public isOnlyVertical() {\n        let isOnlyVertical = true;\n        for (let direction of this.options.directions) {\n            isOnlyVertical = -1 < ['up', 'down'].indexOf(direction);\n            if (!isOnlyVertical) {\n                return false;\n            }\n        }\n        return isOnlyVertical;\n    };\n\n    /**\n     * 是否支持该方向\n     * @param {String} 方向 \n     */\n    public isVaildDirection(direction?: directionString) {\n        return -1 !== this.options.directions.indexOf(direction) || 'none' === direction;\n    };\n\n    public flow(isVaild: boolean, activeStatus: string, inputType: string): string {\n        // if(this.name ==='swipe' ) {\n        //     console.log(isVaild, activeStatus, inputType);\n        // }\n        const STATE_MAP: { [k: number]: any } = {\n            // isVaild === true,\n            // Number(true) === 1\n            // 这个分支不会出现STATUS_FAILED\n            // STATUS_END在上面的代码中也会被重置为STATUS_POSSIBLE, 从而进行重新识别\n            1: {\n                [STATUS_POSSIBLE]: {\n                    [INPUT_MOVE]: STATUS_START,\n                    [INPUT_END]: STATUS_RECOGNIZED,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_START]: {\n                    [INPUT_MOVE]: STATUS_MOVE,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_MOVE]: {\n                    [INPUT_MOVE]: STATUS_MOVE,\n                    [INPUT_END]: STATUS_END,\n                }\n            },\n            // isVaild === false\n            // 这个分支有STATUS_FAILED\n            0: {\n                [STATUS_START]: {\n                    [INPUT_MOVE]: STATUS_CANCELLED,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                },\n                [STATUS_MOVE]: {\n                    [INPUT_MOVE]: STATUS_CANCELLED,\n                    [INPUT_END]: STATUS_END,\n                    [INPUT_CANCEL]: STATUS_CANCELLED\n                }\n            }\n        };\n        // console.warn(Number(isVaild),activeStatus, STATE_MAP[Number(isVaild)][activeStatus]);\n        if (undefined !== STATE_MAP[Number(isVaild)][activeStatus]) {\n            return STATE_MAP[Number(isVaild)][activeStatus][inputType] || activeStatus;\n        } else {\n            return activeStatus;\n        }\n    };\n\n    /**\n     * 如果识别结束, 那么重置状态\n     */\n    protected _resetStatus() {\n        // if (this.name === 'tap') console.log('@', this.status);\n        //STATUS_RECOGNIZED === STATUS_END\n        if (-1 !== [STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED].indexOf(this.status)) {\n\n            this.status = STATUS_POSSIBLE;\n        };\n    };\n\n    /**\n     * 适用于大部分移动类型的手势, \n     * 如pan/rotate/pinch/swipe\n     * @param {Computed} 计算数据 \n     */\n    recognize(computed: Computed) {\n        // if(this.name === 'pan')    console.log(this.name,this.status);\n        // 是否识别成功\n        let isVaild = this.test(computed);\n\n        // 重置status\n        this._resetStatus();\n\n        // 状态变化流程\n        let { eventType } = computed;\n\n        this.status = this.flow(isVaild, this.status, eventType);\n\n        if (STATUS_CANCELLED === this.status) {\n            this.emit(this.options.name + 'cancel', computed);\n            return;\n        }\n\n        // 是否已识别\n        this.isRecognized = -1 < [STATUS_START, STATUS_MOVE, STATUS_END, STATUS_RECOGNIZED].indexOf(this.status);\n        // 识别后触发的事件\n        if (this.isRecognized) {\n            this.afterRecognized(computed);\n            // computed = this.lockDirection(computed);d\n            this.emit(this.options.name, computed);\n            // console.log(this.options.name, computed);\n            if (-1 < [STATUS_START, STATUS_MOVE, STATUS_END, STATUS_RECOGNIZED].indexOf(this.status)) {\n                // panstart | panmove | panend等\n                this.emit(this.options.name + this.status, computed);\n                this.afterEmit(computed);\n            }\n        }\n    };\n\n    /**\n     * 识别条件, 基于异步\n     * @param {Computed} 计算数据\n     * @param {(isRecognized: boolean) => void}} 接收是否识别状态\n     */\n    abstract test(computed: Computed): boolean;\n\n    /**\n     * 识别成功后执行\n     * 这个阶段可以对computed数据做些处理\n     * 比如pan可以针对不支持的方向吧deltaX/Y调整为0\n     * swipe可以把不支持的方向上的速率调整为0\n     * @param {Computed} 计算数据 \n     */\n    public afterRecognized(computed: Computed): void { };\n\n    /**\n     * 基类的所有emit触发后执行\n     * @param {Computed} computed \n     */\n    public afterEmit(computed: Computed): void { };\n\n    /**\n     * 计算当前手势的touch-action\n     */\n    abstract getTouchAction(): string[];\n};\n\n","import { Computed, Point } from '../interface';\nimport {\n    STATUS_RECOGNIZED,\n    STATUS_FAILED,\n    STATUS_START,\n} from '../const/recognizerStatus';\nconst { setTimeout, clearTimeout } = window;\nimport Recognizer from './Base';\nimport { INPUT_END } from '../const';\nimport { getVLength } from '../vector';\nexport default class TapRecognizer extends Recognizer {\n    public tapCount: number;\n\n\n    // 记录每次单击完成时的坐标\n    public prevTapPoint?: Point;\n    public prevTapTime?: number;\n\n    // 多次tap之间的距离是否满足要求\n    public isValidDistanceFromPrevTap?: boolean;\n\n    // timer\n    private _delayFailTimer?: number;\n    private _waitOtherFailedTimer?: number;\n\n    static DEFAULT_OPTIONS = {\n        name: 'tap',\n        pointLength: 1,\n        tapTimes: 1,\n        // 等待下一次tap的时间, \n        // 超过该事件就立即判断当前点击数量\n        waitNextTapTime: 300,\n        disabled: false,\n        // 从接触到离开允许产生的最大距离\n        positionTolerance: 2,\n        // 2次tap之间允许的最大位移\n        tapsPositionTolerance: 9,\n        // 从接触到离开屏幕的最大时间\n        maxPressTime: 250,\n    };\n    constructor(options = {}) {\n        super(options);\n        this.tapCount = 0;\n    };\n\n    public getTouchAction() {\n        // 单击auto, 多击manipulation=pan + pinch-zoom(禁用了默认双击)\n        return (1 < this.options.tapTimes) ? ['manipulation'] : ['auto'];\n    };\n\n    /**\n     * 判断前后2次点击的距离是否超过阈值\n     * @param {Point} 当前触点\n     * @return {Boolean} 前后2次点击的距离是否超过阈值\n     */\n    private _isValidDistanceFromPrevTap(point: Point): boolean {\n        // 判断2次点击的距离\n        if (undefined !== this.prevTapPoint) {\n            const distanceFromPreviousTap = getVLength({ x: point.x - this.prevTapPoint.x, y: point.y - this.prevTapPoint.y });\n            // 缓存当前点, 作为下次点击的上一点\n            this.prevTapPoint = point;\n            return this.options.tapsPositionTolerance >= distanceFromPreviousTap;\n        } else {\n            this.prevTapPoint = point;\n            return true;\n        }\n    };\n\n    /**\n     * 校验2次tap的时间间隔是否满足\n     * @return {Boolean} 是否满足\n     */\n    private _isValidInterval(): boolean {\n        const now = Date.now();\n        if (undefined === this.prevTapTime) {\n            this.prevTapTime = now;\n            return true;\n        } else {\n            const interval = now - this.prevTapTime;\n            this.prevTapTime = now;\n            return interval < this.options.waitNextTapTime;\n        }\n    };\n\n    /**\n     * 识别后执行\n     * @param {Computed} 计算数据 \n     */\n    public recognize(computed: Computed): void {\n        // 只在end阶段去识别\n        if (INPUT_END !== computed.eventType) return;\n\n        // 如果识别结束, 那么重置状态\n        this._resetStatus();\n\n        // 每一次点击是否符合要求\n        if (this.test(computed)) {\n\n\n            // 一旦每次tap识别成功, 那么一段时间后如果不符合多次点击条件, 设置状态为failed\n            this._cancelDelayFail();\n            this._delayFail();\n\n            // 判断2次点击之间的距离是否过大\n            // 对符合要求的点击进行累加\n            if (this._isValidDistanceFromPrevTap(computed) && this._isValidInterval()) {\n                this.tapCount++;\n            }\n            //  不满足条件, 那么当前的点击作为单击tap触发\n            else {\n                this.tapCount = 1;\n            }\n\n            // 是否满足点击次数要求\n            if (0 === this.tapCount % this.options.tapTimes ) {\n                // 如果符合点击次数的要求\n                // 那么取消延迟失败的定时器\n                this._cancelDelayFail();\n                // 仅仅为了不让状态为possible和failed\n                // 这样isAllRequiresFailedOrPossible才不会错误的触发其他还没有符合条件的tap\n                // 因为isAllRequiresFailedOrPossible方法会监测possible和failed俩种状态\n                // 这里的STATUS_START可以想成在等待failture前的等待状态\n                this.status = STATUS_START;\n                // 如果需要其他手势失败\n                // 等待(300ms)其他手势失败后触发\n                if (this.hasRequireFailure() && !this.isAllRequireFailureRecognizersDisabled()) {\n                    this._waitOtherFailedTimer = setTimeout(() => {\n                        // 检查指定手势是否识别为Failed\n                        if (this.isAllRequiresFailedOrPossible()) {\n                            this.status = STATUS_RECOGNIZED;\n                            this.emit(this.options.name, { ...computed, tapCount: this.tapCount });\n                        } else {\n                            this.status = STATUS_FAILED;\n                        };\n                        // 不论成功失败都要重置tap计数\n                        this.reset();\n                    }, this.options.waitNextTapTime);\n                }\n                // 如果不需要等待其他手势失败\n                // 那么立即执行\n                else {\n                    this.status = STATUS_RECOGNIZED;\n                    this.emit(this.options.name, { ...computed, tapCount: this.tapCount });\n                    this.reset();\n                }\n            }\n        } else {\n            // if (this.options.tapTimes !== this.tapCount) {\n            //     clearTimeout(this._waitOtherFailedTimer);\n            // }\n            this.reset();\n            this.status = STATUS_FAILED;\n        }\n    };\n\n    public reset() {\n        this.tapCount = 0;\n        this.prevTapPoint = undefined;\n        this.prevTapTime = undefined;\n    };\n\n    /**\n     * 指定时间后, 设置状态为失败\n     */\n    private _delayFail(cb: () => void = () => { }) {\n        this._delayFailTimer = setTimeout(() => {\n            this.status = STATUS_FAILED;\n            cb();\n        }, this.options.waitNextTapTime);\n    };\n\n    /**\n     * 取消延迟失败定时\n     */\n    private _cancelDelayFail() {\n        clearTimeout(this._delayFailTimer);\n    };\n\n    /**\n      * 识别条件\n      * @param {Computed} 计算数据\n      * @return {Boolean} 是否验证成功\n      */\n    public test(computed: Computed): boolean {\n        // 判断是否发生大的位置变化\n        const { distance, deltaTime, maxpointLength } = computed;\n        // 检查\n        // 1. 触点数\n        // 2. 移动距离\n        // 3. start至end的事件, 区分tap和press\n        return maxpointLength === this.options.pointLength &&\n            this.options.positionTolerance >= distance &&\n            this.options.maxPressTime > deltaTime;\n    };\n\n    public afterEmit(computed: Computed): void { }\n};","import { Computed } from '../interface';\nimport {\n    STATUS_POSSIBLE,\n    STATUS_CANCELLED,\n    STATUS_FAILED, STATUS_RECOGNIZED\n} from '../const/recognizerStatus';\nimport { INPUT_CANCEL, INPUT_END, INPUT_MOVE, INPUT_START } from '../const';\nimport Recognizer from './Base';\nexport default class PressRecognizer extends Recognizer {\n    private _timeoutId?: number;\n    static DEFAULT_OPTIONS = {\n        name: 'press',\n        pointLength: 1,\n        positionTolerance: 9,\n        minPressTime: 251,\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction(): string[] {\n        return ['auto'];\n    };\n\n    recognize(computed: Computed): void {\n        const { eventType, pointLength, distance, deltaTime } = computed;\n\n        // 1. start阶段\n        // 2. 触点数符合\n        // 那么等待minPressTime时间后触发press\n        if (INPUT_START === eventType && this.isValidPointLength(pointLength)) {\n            // 重置状态\n            this._resetStatus();\n            // 延迟触发\n            this.cancel();\n            this._timeoutId = window.setTimeout(() => {\n                this.status = STATUS_RECOGNIZED;\n                this.emit(this.options.name, computed);\n            }, this.options.minPressTime);\n        }\n\n        // 触发pressup条件:\n        // 1. end阶段\n        // 2. 已识别\n        else if (INPUT_END === eventType && STATUS_RECOGNIZED === this.status) {\n            this.emit(`${this.options.name}up`, computed);\n        }\n\n        // 一旦不满足必要条件, 触发失败\n        // 对应cancel和end阶段\n        else if (!this.test(computed) || (this.options.minPressTime > deltaTime && -1 !== [INPUT_END, INPUT_CANCEL].indexOf(eventType) )) {\n            this.cancel();\n            this.status = STATUS_FAILED;\n        }\n\n    };\n\n    /**\n     * 是否满足:\n     * 移动距离不大\n     */\n    test({ distance}: Computed): boolean {\n        return this.options.positionTolerance > distance;\n    };\n\n    cancel(): void {\n        clearTimeout(this._timeoutId);\n    }\n\n    afterEmit() { }\n};","/**\n * 获取数组中方向是否水平/垂直\n * @param {directionString[]} 方向数组, ['left', 'right','up', 'down']\n * \n */\nimport {directionString} from '../interface';\nexport default (directions: [directionString?, directionString?, directionString?, directionString?]): { hasHorizontal: boolean, hasVertical: boolean } => {\n    let hasHorizontal = false;\n    let hasVertical = false;\n    for (let direction of directions) {\n        if (-1 < ['left', 'right'].indexOf(<string>direction)) {\n            hasHorizontal = true;\n            if (hasVertical) break;\n        } else if (-1 < ['up', 'down'].indexOf(<string>direction)) {\n            hasVertical = true;\n            if (hasHorizontal) break;\n        } else {\n            throw new Error('wrong direction!');\n        }\n    };\n    return { hasHorizontal, hasVertical };\n};","import { Computed, directionString } from '../interface';\nimport { INPUT_MOVE } from '../const';\nimport Recognizer from './Base';\nimport getHV from '../untils/getHV';\n\nexport default class PanRecognizer extends Recognizer {\n    static DEFAULT_OPTIONS = {\n        name: 'pan',\n        threshold: 10,\n        pointLength: 1,\n        directions: ['up', 'right', 'down', 'left']\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        let touchActions = ['auto'];\n        let { hasHorizontal, hasVertical } = getHV(this.options.directions);\n        if (hasHorizontal && hasVertical) {\n            touchActions = ['none'];\n        } else if (!hasHorizontal && hasVertical) {\n            // 没有水平移动\n            touchActions = ['pan-x'];\n        } else if (!hasVertical && hasHorizontal) {\n            // 没有垂直移动\n            touchActions = ['pan-y'];\n        }\n        return touchActions;\n    };\n\n    /**\n     * @param {Computed} 计算数据\n     * @return {Boolean}} .是否是当前手势 \n     */\n    test({ distance, direction, eventType, pointLength }: Computed): boolean {\n        return INPUT_MOVE === eventType &&\n            (this.isRecognized || this.options.threshold < distance) &&\n            this.isValidPointLength(pointLength) &&\n            this.isVaildDirection(direction);\n    };\n\n    /**\n     * 识别后发布panleft等事件\n     * @param {Computed} 计算数据\n     */\n    afterEmit(computed: Computed) {\n        if ('none' !== computed.direction) {\n            this.emit(this.options.name + computed.direction, computed);\n        }\n    };\n\n    afterRecognized(computed: Computed) {\n        this.lockDirection(computed);\n    }\n\n    /**\n     * 移除限制方向的deltaX/Y\n     * @param {Computed} computed \n     */\n    public lockDirection(computed: Computed): Computed {\n        if (undefined === this.options.directions || 0 === this.options.directions.length) return computed;\n        let deltaX = 0;\n        let deltaY = 0;\n        this.options.directions.forEach((direction: string) => {\n            if ('left' === direction && 0 > computed.deltaX) {\n                deltaX = computed.deltaX;\n            } else if ('right' === direction && 0 < computed.deltaX) {\n                deltaX = computed.deltaX;\n            } else if ('down' === direction && 0 < computed.deltaY) {\n                deltaY = computed.deltaY;\n            } else if ('up' === direction && 0 > computed.deltaY) {\n                deltaY = computed.deltaY;\n            }\n        });\n        computed.deltaX = deltaX;\n        computed.deltaY = deltaY;\n        return computed;\n    };\n};","import Recognizer from './Base';\nimport { Computed } from '../interface';\nimport { INPUT_END } from '../const';\nexport default class SwipeRecognizer extends Recognizer {\n    static DEFAULT_OPTIONS = {\n        name: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        pointLength: 1,\n        directions: ['up', 'right', 'down', 'left']\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        return ['none'];\n    };\n\n    /**\n     * 识别后发布swipeleft等事件\n     * @param {Computed} 计算数据\n     */\n    afterEmit(computed: Computed) {\n        if ('none' !== computed.direction) {\n            this.emit(this.options.name + computed.direction, computed);\n        }\n    };\n\n    /**\n     * 识别条件\n     * @param {Computed} 计算数据\n     */\n    test(computed: Computed): boolean {\n        if (INPUT_END !== computed.eventType) return false;\n\n        // 非end阶段, 开始校验数据\n        const { direction, velocityX, velocityY, maxpointLength, distance } = computed;\n        // 如果只支持水平或垂直, 那么其他方向速率为0;\n        // 有效速率\n        let vaildVelocityX: number = velocityX;\n        let vaildVelocityY: number = velocityY;\n        if (this.isOnlyHorizontal()) {\n            vaildVelocityY = 0;\n        } else if (this.isOnlyVertical()) {\n            vaildVelocityX = 0;\n        }\n\n        let vaildVelocity = Math.sqrt(vaildVelocityX * vaildVelocityX + vaildVelocityY * vaildVelocityY)\n\n        return 1 === maxpointLength &&\n            this.options.threshold < distance &&\n            this.isVaildDirection(direction) &&\n            this.options.velocity < vaildVelocity;\n    };\n};","import { Computed } from '../interface';\nimport Recognizer from './Base';\n\n\nexport default class PinchRecognizer extends Recognizer {\n    private _prevScale: number;\n    static DEFAULT_OPTIONS = {\n        name: 'pinch',\n        // 触发事件所需要的最小缩放比例\n        threshold: 0,\n        pointLength: 2,\n    };\n    constructor(options={}) {\n        super(options);\n        this._prevScale = 1;\n    };\n    \n    getTouchAction(){\n        return ['none'];\n    };\n\n    afterEmit(computed: Computed) {\n        if('end' === computed.eventType) return;\n        // pinchin | pinchout\n        const { scale } = computed;\n        if (1 !== scale) {\n            const inOrOut = scale > this._prevScale ? 'out' : 'in';\n            this.emit(this.options.name + inOrOut, computed);\n        }\n        this._prevScale = scale;\n    };\n\n    /**\n     * 识别条件\n     * @param {Computed} 计算数据\n     * @param {(isRecognized: boolean) => void}} 接收是否识别状态\n     */\n    test({ pointLength, scale }: Computed): boolean {\n        // 如果触碰点数要大于指定\n        // 如果缩放超过阈值, 或者已识别\n        // console.log({scale})\n        return this.isValidPointLength(pointLength) && (this.options.threshold < Math.abs(scale-1) || this.isRecognized);\n    };\n};","import Base from './Base';\nimport { Computed } from '../interface';\nexport default class RotateRecognizer extends Base {\n    static DEFAULT_OPTIONS = {\n        name: 'rotate',\n        // 触发事件所需要的最小角度\n        threshold: 0,\n        pointLength: 2,\n    };\n    constructor(options = {}) {\n        super(options);\n    };\n\n    getTouchAction() {\n        return ['none'];\n    };\n\n    /**\n     * 无特殊事件要触发\n     */\n    afterEmit(computed: Computed) { };\n\n    /**\n     * 识别条件\n     * @param {Computed} 计算数据\n     * @return {Boolean} 接收是否识别状态\n     */\n    test({ pointLength, angle }: Computed): boolean {\n        // 如果触碰点数要大于指定\n        // 如果缩放超过阈值, 或者已识别\n        return this.isValidPointLength(pointLength) && (this.options.threshold < Math.abs(angle) || this.isRecognized);\n    };\n};","/**\n * ==================== 参考 ====================\n * https://segmentfault.com/a/1190000010511484#articleHeader0\n * https://segmentfault.com/a/1190000007448808#articleHeader1\n * hammer.js\n * \n * ==================== 支持的手势 ====================\n * rotate 旋转\n * pinch 捏合,\n * tap 单机\n * doubleTap 双击\n * press 按压\n * pan 拖拽\n * swipe 快划\n * \n * ==================== 流程 ====================\n * 格式化Event成统一的pointer格式 => 通过pointer数据计算 => 用计算结果去识别手势\n */\nimport { Computed } from './interface';\nimport AnyEvent from 'any-event';\nimport { SUPPORT_TOUCH } from './const'; ``\nimport InputManage from './InputManage';\nimport compute from './compute/index';\nimport computeTouchAction from './untils/computeTouchAction'\n// 识别器\nimport Recognizer from './recognitions/Base';\nimport Tap from './recognitions/Tap';\nimport Press from './recognitions/Press';\nimport Pan from './recognitions/Pan';\nimport Swipe from './recognitions/Swipe';\nimport Pinch from './recognitions/Pinch';\nimport Rotate from './recognitions/Rotate';\nimport * as Vector from './vector';\ninterface Options {\n    touchAction?: 'compute' | 'auto' | 'manipulation' | 'pan-x' | 'pan-y' | 'none';\n    hasDomEvents?: boolean;\n    isPreventDefault?: boolean;\n    style?: { [key: string]: string };\n};\nexport class AnyTouch {\n    // 识别器\n    static Tap = Tap;\n    static Press = Press;\n    static Pan = Pan;\n    static Swipe = Swipe;\n    static Pinch = Pinch;\n    static Rotate = Rotate;\n    static version = '__VERSION__';\n\n    // 向量计算\n    static Vector = Vector;\n\n    // mini的事件触发器\n    static EventEmitter = AnyEvent;\n\n    // 目标元素\n    el: HTMLElement;\n\n    default: Options;\n\n    inputType: string;\n\n    recognizers: Recognizer[];\n\n    options: Options;\n\n\n    eventEmitter: AnyEvent;\n\n    inputManage: InputManage;\n\n    // 是否阻止后面的识别器运行\n    private _isStopped: boolean;\n\n    /**\n     * @param {Element} 目标元素\n     * @param {Object} 选项\n     */\n    constructor(el: HTMLElement, options?: Options) {\n        this.default = {\n            touchAction: 'compute',\n            hasDomEvents: true,\n            isPreventDefault: false,\n            style: {\n                // 禁用选择文字\n                '-moz-user-select': 'none',\n                ' -webkit-user-select': 'none',\n                '-ms-user-select': 'none',\n                'user-select': 'none',\n                // https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-touch-select\n                // 禁用选择文字, 在winphone下\n                '-ms-touch-select': 'none',\n                // 点击元素的高亮颜色配置\n                '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n                ' -webkit-user-drag': 'none',\n                // 当你触摸并按住触摸目标时候，\n                // 禁止或显示系统默认菜单。\n                // 在iOS上，当你触摸并按住触摸的目标，\n                // 比如一个链接，Safari浏览器将显示链接有关的系统默认菜单。\n                // 这个属性可以让你禁用系统默认菜单。\n                '-webkit-touch-callout': 'none'\n            }\n        };\n        this.el = el;\n        this.inputManage = new InputManage();\n        this.inputType = SUPPORT_TOUCH ? 'touch' : 'mouse';\n        this.options = { ...this.default, ...options };\n        // eventEmitter\n        this.eventEmitter = new AnyEvent();\n        this._isStopped = false;\n        // 识别器\n        // 注入当前方法和属性, 方便在识别器中调用类上的方法和属性\n        this.recognizers = [\n            new Rotate().$injectRoot(this),\n            new Pinch().$injectRoot(this),\n            new Pan().$injectRoot(this),\n            new Swipe().$injectRoot(this),\n            new Tap().$injectRoot(this),\n            new Tap({\n                name: 'doubletap',\n                pointLength: 1,\n                tapTimes: 2,\n                disabled: true\n            }).$injectRoot(this),\n            new Press().$injectRoot(this),\n        ];\n        // 默认单击需要双击识别失败后触发\n        this.recognizers[4].requireFailure(this.recognizers[5]);\n        // 应用设置\n        this.update();\n        // 绑定事件\n        this.unbind = this._bindRecognizers(this.el).unbind;\n    };\n\n\n    /**\n     * 计算touch-action\n     * @param {HTMLElement} 目标元素 \n     */\n    private _updateTouchAction() {\n        if ('compute' === this.options.touchAction) {\n            let touchActions = [];\n            for (let recognizer of this.recognizers) {\n                touchActions.push(...recognizer.getTouchAction());\n            };\n            this.el.style.touchAction = computeTouchAction(touchActions);\n        } else {\n            this.el.style.touchAction = this.options.touchAction || 'auto';\n        }\n    };\n\n    /**\n     * 应用几个提高体验的样式\n     * 如: 禁止选择文字/透明点击高亮颜色等\n     */\n    private _updateStyle() {\n        for (let key in this.options.style) {\n            let value = this.options.style[key];\n            (this.el.style as any)[key] = value;\n        }\n    };\n\n    /**\n     * 更新设置\n     */\n    public update() {\n        this._updateStyle();\n        this._updateTouchAction();\n    };\n\n    /**\n     * 绑定手势到指定元素\n     * 暂时只支持事件冒泡阶段触发, \n     * 改为捕获阶段需要对inputListener进行编号, \n     * 产生大量事件绑定,\n     * 而非在一次触发事件中执行所有手势判断\n     * @param {Element} 待绑定手势元素\n     */\n    private _bindRecognizers(el: Element) {\n        const boundInputListener = this.inputListener.bind(this);\n        // Touch\n        if ('touch' === this.inputType) {\n            const events = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n            events.forEach(eventName => {\n                el.addEventListener(eventName, boundInputListener);\n            });\n            return {\n                unbind: () => {\n                    events.forEach(eventName => {\n                        el.removeEventListener(eventName, boundInputListener);\n                    });\n                }\n            }\n\n\n        }\n        // Mouse\n        else {\n            el.addEventListener('mousedown', boundInputListener);\n            window.addEventListener('mousemove', boundInputListener);\n            window.addEventListener('mouseup', boundInputListener);\n            return {\n                unbind: () => {\n                    el.removeEventListener('mousedown', boundInputListener);\n                    window.removeEventListener('mousemove', boundInputListener);\n                    window.removeEventListener('mouseup', boundInputListener);\n                }\n            };\n        }\n    };\n\n    /**\n     * 添加识别器\n     * @param recognizer 识别器\n     */\n    add(recognizer: Recognizer): void {\n        recognizer.$injectRoot(this);\n        const hasSameName = this.recognizers.some((theRecognizer: Recognizer) => recognizer.name === theRecognizer.name);\n        if (hasSameName) {\n            this.eventEmitter.emit('error', { code: 1, message: `${recognizer.name}识别器已经存在!` })\n        } else {\n            this.recognizers.push(recognizer);\n            this.update();\n        }\n    };\n\n    /**\n     * 获取识别器通过名字\n     * @param {String} 识别器的名字\n     * @return {Recognizer|undefined} 返回识别器\n     */\n    get(name: string): Recognizer | undefined {\n        return this.recognizers.find(recognizer => name === recognizer.options.name);\n    };\n\n    /**\n     * 设置\n     * @param {Options} 选项 \n     */\n    set(options: Options): void {\n        this.options = { ...this.default, ...options };\n        this.update();\n    };\n\n    /**\n     * 停止识别\n     */\n    stop() {\n        this._isStopped = true;\n    }\n\n    /**\n     * 删除识别器\n     * @param {String} 识别器name\n     */\n    remove(recognizerName: string): void {\n        for (let [index, recognizer] of this.recognizers.entries()) {\n            if (recognizerName === recognizer.options.name) {\n                this.recognizers.splice(index, 1);\n                break;\n            }\n        }\n    };\n\n    /**\n     * 监听input变化\n     * @param {Event}\n     */\n    inputListener(event: Event): void {\n        if (this.options.isPreventDefault) {\n            event.preventDefault();\n        }\n\n        if (!event.cancelable) {\n            this.eventEmitter.emit('error', { code: 0, message: '页面滚动的时候, 请暂时不要操作元素!' });\n        }\n\n        // 管理历史input\n        let inputs = this.inputManage.load(event);\n        // 当是鼠标事件的时候, mouseup阶段的input为undefined\n        if (undefined !== inputs) {\n            const computed = compute(inputs);\n            // 重置停止标记\n            if (computed.isFirst) {\n                this._isStopped = false;\n            }\n            // input事件\n            this.emit('input', computed);\n            if (computed.isFirst) {\n                this.emit('inputstart', computed);\n            } else if (computed.isFinal) {\n                if ('cancel' === computed.eventType) {\n                    this.emit('inputcancel', computed);\n                } else {\n                    this.emit('inputend', computed);\n                }\n            } else {\n                // prevInput和input一定不为空\n                if (inputs.prevInput!.pointLength > inputs.input!.pointLength) {\n                    this.emit('inputreduce', computed);\n                } else if (inputs.prevInput!.pointLength < inputs.input!.pointLength) {\n                    this.emit('inputadd', computed);\n                } else {\n                    this.emit('inputmove', computed);\n                }\n            };\n\n\n            for (let recognizer of this.recognizers) {\n                if (recognizer.disabled) continue;\n                // 如果遇到停止标记, 立即停止运行后面的识别器\n                recognizer.recognize(computed);\n                if (this._isStopped) {\n                    break;\n                }\n            }\n        }\n    };\n\n    /**\n     * 注册事件\n     * @param {String} 事件名\n     * @param {Function} 回调函数\n     */\n    on(type: string, listener: (event: Computed) => void, options: { [k: string]: boolean } | boolean = false): void {\n        this.eventEmitter.on(type, listener);\n    };\n\n    /**\n     * 解绑事件\n     * @param {String} 事件名 \n     * @param {Function} 事件回调\n     */\n    off(type: string, listener?: (event: Computed) => void): void {\n        this.eventEmitter.off(type, listener);\n    };\n\n    /**\n     * 触发事件, 同时type会作为payload的一个键值\n     * @param {String} 类型名\n     * @param {Object} 数据\n     */\n    emit(type: string, payload: Pick<any, 'type'>) {\n        payload.type = type;\n        this.eventEmitter.emit(type, payload);\n    };\n\n    /**\n     * 解绑所有触摸事件\n     */\n    unbind(): void { };\n\n    /**\n     * 销毁\n     */\n    destroy() {\n        // 解绑事件\n        this.unbind();\n        this.eventEmitter.destroy();\n    };\n};","/**\n * 管理实例和元素的映射关系\n * 一个元素只能对应一个实例\n */\nexport default class <T extends { new(...arys: any): any }> {\n    // 存储映射关系\n    stock: { el: HTMLElement, instance: InstanceType<T> }[] = [];\n    ClassObject: T;\n\n    constructor(ClassObject: T) {\n        this.stock = [];\n        this.ClassObject = ClassObject;\n    };\n\n    /**\n    * 获取元素在stock中的索引\n    * @param {Element} 元素 \n    * @returns {Number} 元素索引 \n    */\n    getIndexByEl(el: HTMLElement): number {\n        for (let i = 0, len = this.stock.length; i < len; i++) {\n            if (el === this.stock[i].el) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * 获取实例\n     * @param {Number} 索引\n     * @return {InstanceType<T>} 实例 \n     */\n    getInstanceByIndex(index: number): InstanceType<T> {\n        return this.stock[index]!.instance;\n    };\n\n    /**\n     * 删除指定实例\n     * @param {Number} 索引\n     */\n    removeInstanceByIndex(index: number): void {\n        this.stock.splice(index, 1);\n    };\n\n    /**\n     * 获取实例, 如果没有新建\n     * @param {Element} 目标元素\n     * @param {InstanceType<T>}  InstanceType<T>实例\n     */\n    getOrCreateInstanceByEl(el: HTMLElement): InstanceType<T> {\n        const manageIndex = this.getIndexByEl(el);\n        // 防止同一个元素上同一个指令实例化多个InstanceType<T>\n        if (-1 === manageIndex) {\n            // 新建实例\n            const instance = new this.ClassObject(el);\n            this.stock.push({el, instance});\n            return instance;\n        } else {\n            return this.getInstanceByIndex(manageIndex);\n        }\n    };\n};","// 注意: 由于vue指令没办法对指令进行优先级设置, 所以指令版本并不能实现AnyTouch所有的功能,\n// 比如新建手势. 所以指令版只支持tap/doubletap/pan/swipe/rotate/pinch等默认手势\nimport { Computed } from '../interface';\nimport { VueConstructor } from 'vue/types/vue';\nimport { DirectiveBinding } from 'vue/types/options';\nimport InstanceManage from './InstanceManage';\nimport { AnyTouch } from '../AnyTouch';\n\n// 管理实例和元素的映射关系\nconst iManage = new InstanceManage(AnyTouch);\n// 导出指令\nconst plugin = {\n    install(Vue: VueConstructor) {\n        const _bindEvent = (el: HTMLElement, binding: DirectiveBinding) => {\n            let instance = iManage.getOrCreateInstanceByEl(el);\n            // 导入AnyTouch实例\n            if (undefined !== binding.value) {\n                binding.value(instance);\n            }\n        };\n\n        /**\n         * 解除绑定事件\n         * @param {Element} 关联元素 \n         */\n        const _unbindEvent = (el: HTMLElement) => {\n            const index = iManage.getIndexByEl(el);\n            // 防止一个元素上的多个手势指令会重复触发删除\n            if (-1 !== index && undefined !== iManage.getInstanceByIndex(index)) {\n                iManage.getInstanceByIndex(index).destroy();\n                iManage.removeInstanceByIndex(index);\n            }\n        };\n\n        Vue.directive('touch', {\n            inserted(el, binding) {\n                _bindEvent(el, binding);\n            },\n\n            update(el, binding) {\n                _bindEvent(el, binding);\n            },\n\n            unbind(el) {\n                _unbindEvent(el);\n            }\n        });\n    }\n};\n\n// if('test' !== process.env.NODE_ENV){\n    \n// }\n// 自动加载插件\n// if (typeof <any>window !== 'undefined' && (<any>window).Vue) {\n//     (<any>window).Vue.use(plugin);\n// };\n\nexport default plugin;\n","import { AnyTouch } from './AnyTouch';\nimport VueDirective from './vueDirective';\n// interface ABC {\n//     a: number,\n//     b: string,\n//     c: [number, string]\n// }\n\n// interface DEF {\n//     d?: null,\n//     e?: undefined,\n//     f?: any\n// }\n\n// interface ACE {\n//     a: number,\n//     c: [number, string],\n//     e?: undefined\n// }\n// type Key = keyof ABC;\n// type A = Record<'a' | 'c', ABC>\n// type B = Pick<DEF, 'd' | 'f'>\n// type C = Partial<ABC>\n// type D = Required<DEF>\n// type E = Readonly<ABC> // { readonly a: number; readonly b: string; readonly c: [number, string]; }\n// // 从\"前面\"排除\"后面\"也有类型\n// type F = Exclude<'a' | 'b' | 'c', 'a' | 'e' | 'f'> // 'b'|'c'\n// // 提取2者公有类型\n// type G = Extract<'a' | 'b', 'a' | 'e'> // 'a'\n// type H = NonNullable<DEF | null | undefined> // DEF\n// type I = ReturnType<() => number> // number\n// interface TestClass {\n//     new(n:number, s:string):TestClass;\n// }\n\n// type J = InstanceType<TestClass>\n// // extends {new (...args:any):any}\n// type K = Parameters<(s:string,n:number)=>void>\n// type L = ConstructorParameters<TestClass>\nexport default class extends AnyTouch {\n    // vue指令版\n    static vTouch = VueDirective;\n}"],"names":["__values","__read","__spread","Touch","Mouse","default_1","InputFactory","tslib_1.__values","clearTimeout","tslib_1.__extends","Base","InputManage","AnyEvent","Rotate","Pinch","Pan","Swipe","Tap","Press","InstanceManage","VueDirective"],"mappings":"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"}